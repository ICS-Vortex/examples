<?php

namespace App\Repository;

use App\Entity\Admin;
use App\Entity\Pilot;
use App\Entity\Server;
use App\Entity\Visitor;
use DateTime;
use Doctrine\DBAL\DBALException;
use Doctrine\ORM\EntityRepository;
use Exception;
use PDO;

/**
 * VisitorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VisitorRepository extends BaseRepository
{
    /**
     * @param Pilot $pilot
     * @param Server|null $server
     * @return array|int[]
     * @throws \Doctrine\DBAL\Driver\Exception
     */
    public function lastSeen(Pilot $pilot, Server $server = null): array
    {
        $em = $this->getEntityManager();
        $serverWhere = '';
        if (!empty($server)) {
            $serverWhere = "AND server_id={$server->getId()}";
        }
        $sql = "
            SELECT enter_time 
            FROM `{$this->getClassMetadata()->getTableName()}`
            WHERE `pilot_id`={$pilot->getId()} {$serverWhere}
            ORDER BY `enter_time` DESC 
            LIMIT 1
        ";
        try {
            $result = $em->getConnection()->executeQuery($sql)->fetchAssociative();
            if(!empty($result)){
                return $this->ago($result['enter_time']);
            }
            return [];
        } catch (\Doctrine\DBAL\Exception | Exception $e) {
            return [];
        }
    }

    /**
     * @param $date
     * @return array
     * @throws Exception
     */
    private function ago($date) : array
    {
        $unix = strtotime($date);
        $datetime1 = new DateTime(date('Y-m-d H:i:s', $unix));
        $datetime2 = new DateTime();
        $interval = $datetime2->diff($datetime1);
        return array(
            'days' => (int) $interval->format('%a'),
            'hours' => (int) $interval->format('%H'),
            'minutes' => (int) $interval->format('%I'),
        );
    }

    public function getVisitorsForCurrentMonth(Server $admin) : array
    {
        $em = $this->getEntityManager();
        $visTable = $em->getClassMetadata(Visitor::class)->getTableName();
        $serTable = $em->getClassMetadata(Server::class)->getTableName();
        $result = [];
        $start = date('Y-m-01');
        $end = date('Y-m-d');
        /** @var Server $server */
        foreach ($admin->getServers() as $server) {
            $sql = "
                SELECT 
                    {$visTable}.date_enter, 
                    COUNT({$visTable}.pilot_id) AS visits, 
                    {$visTable}.server_id,
                    {$serTable}.name
                FROM `{$visTable}`
                LEFT JOIN `{$serTable}` ON `{$serTable}`.id=`{$visTable}`.server_id
                WHERE server_id={$server->getId()} AND date_enter BETWEEN '{$start}' AND '{$end}'
                GROUP BY date_enter
            ";
            $dataset = $em->getConnection()->executeQuery($sql)->fetchAllAssociative();
            $result[$server->getName()] = $this->normalizeVisitorsData($dataset);
        }
        return $result;
    }

    public function getTodayVisitors(Server $server) : array
    {
        $em = $this->getEntityManager();
        $visitorsTable = $em->getClassMetadata(Visitor::class)->getTableName();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $start = date('Y-m-d 00:00:00');
        $end = date('Y-m-d 23:59:59');
        $sql = "
            SELECT 
                {$pilotsTable}.id id,
                {$pilotsTable}.username username,
                {$pilotsTable}.ip_address ip_address,
                {$pilotsTable}.country country,
                {$pilotsTable}.ucid ucid,
                {$visitorsTable}.enter_time visit_time
            FROM {$visitorsTable}
            LEFT JOIN {$pilotsTable} ON {$pilotsTable}.id = {$visitorsTable}.pilot_id
            WHERE server_id={$server->getId()} AND (enter_time BETWEEN '{$start}' AND '{$end}')
        ";
        $dataset = $em->getConnection()->executeQuery($sql)->fetchAllAssociative();
//        $result[$server->getName()] = $this->normalizeVisitorsData($dataset);
        return $dataset;
    }

    private function normalizeVisitorsData($data) {
        $result = [];
        $lastRow = null;
        foreach ($data as $row) {
            $result[$row['date_enter']] = $row;
            $lastRow = $row;
        }

        $now = (int) date('d');
        for($i = 1; $i <= $now; $i++) {
            $day = $i;
            if ($day < 10) {
                $day = (string) ('0' . $day);
            }
            $date = date('Y-m-'.$day);
            if (!isset($result[$date])) {
                $result[$date] = [
                    'date_enter' => $date,
                    'visits' => 0,
                    'server_id' => $lastRow['server_id']
                ];
            }
        }
        ksort($result);
        return $result;
    }
}
