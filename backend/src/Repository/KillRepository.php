<?php

namespace App\Repository;

use App\Entity\Kill;
use App\Entity\MissionRegistry;
use App\Entity\Pilot;
use App\Entity\Server;
use App\Entity\Tour;
use Doctrine\DBAL\Exception;

/**
 * KillRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KillRepository extends BaseRepository
{
    public const RED = 'RED';
    public const BLUE = 'BLUE';

    public function getKillsForRegistry(MissionRegistry $registry)
    {
        $em = $this->getEntityManager();
        $killsTable = $em->getClassMetadata(Kill::class)->getTableName();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();

        $query = "
            SELECT 
                 `{$pilotsTable}`.`id` AS pilot_id,
                 `{$pilotsTable}`.`username` AS callsign,
                 COUNT(unit_id) AS destroyed
            FROM `{$killsTable}`
            INNER JOIN `{$pilotsTable}` ON `{$pilotsTable}`.`id`=`{$killsTable}`.`pilot_id`
            WHERE `{$killsTable}`.`mission_registry_id`={$registry->getId()}
            GROUP BY `{$killsTable}`.`pilot_id`
            ORDER BY `destroyed` DESC
        ";

        $result = $em->getConnection()->query($query)->fetchAll();
        return $result;
    }

    public function getDogfightsForRegistry(MissionRegistry $registry){
        $em = $this->getEntityManager();
        $killsTable = $em->getClassMetadata(Dogfights::class)->getTableName();
        $pilotsTable = $em->getClassMetadata(Pilots::class)->getTableName();

        $query = "
            SELECT 
                 `{$pilotsTable}`.`id` AS pilot_id,
                 `{$pilotsTable}`.`username` AS callsign,
                 COUNT(victim_id) AS killed
            FROM `{$killsTable}`
            INNER JOIN `{$pilotsTable}` ON `{$pilotsTable}`.`id`=`{$killsTable}`.`pilot_id`
            WHERE `{$killsTable}`.`mission_registry_id`={$registry->getId()}
            GROUP BY `{$killsTable}`.`pilot_id`
            ORDER BY `killed` DESC
        ";

        $result = $em->getConnection()->query($query)->fetchAll();
        return $result;
    }

    public function getTopAttackers(Server $server, Tour $tour, $count = 10): array
    {
        $em = $this->getEntityManager();
        $table = $this->getClassMetadata()->getTableName();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $query = "
            SELECT
                {$table}.pilot_id AS id,
                {$pilotsTable}.username AS callsign,
                {$pilotsTable}.country AS country,
                IFNULL(COUNT({$table}.unit_id), 0) AS destroyed
            FROM {$table}
            LEFT JOIN {$pilotsTable} ON {$pilotsTable}.id={$table}.pilot_id
            WHERE {$table}.server_id = {$server->getId()} and {$table}.tour_id = {$tour->getId()} AND {$table}.friendly = 0
            GROUP BY {$table}.pilot_id
            ORDER BY destroyed DESC
            LIMIT {$count}
        ";

        return $em->getConnection()->executeQuery($query)->fetchAllAssociative();
    }

    public function getGroundKillsInfo(Server $server, Tour $tour = null)
    {
        $em = $this->getEntityManager();
        $table = $em->getClassMetadata(Kill::class)->getTableName();
        $sql = "
            SELECT 
                side,
                COUNT(unit_id) AS kills
            FROM `{$table}` 
            WHERE server_id={$server->getId()}
        ";
        if (!empty($tour)) {
            $sql .= " AND tour_id={$tour->getId()}";
        }

        $sql .= " GROUP BY side";

        $search = $em->getConnection()->query($sql)->fetchAll();
        $results = [];
        foreach ($search as $item) {
            $results[$item['side']] = (int)$item['kills'];
        }
        $results['RED'] = $results['RED'] ?? 0;
        $results['BLUE'] = $results['BLUE'] ?? 0;
        $results['total'] = $results['BLUE'] + $results['RED'];

        return $results;
    }

    /**
     * @param Server $server
     * @param Tour|null $tour
     * @return array
     * @throws \Doctrine\DBAL\Driver\Exception
     * @throws Exception
     */
    public function getGroundKillsInfoByPoints(Server $server, Tour $tour = null): array
    {
        $em = $this->getEntityManager();
        $table = $em->getClassMetadata(Kill::class)->getTableName();
        $sql = "
            SELECT 
                side,
                SUM(points) AS points
            FROM `{$table}` 
            WHERE server_id={$server->getId()}
        ";
        if (!empty($tour)) {
            $sql .= " AND tour_id={$tour->getId()}";
        }

        $sql .= " GROUP BY side";

        $search = $em->getConnection()->executeQuery($sql)->fetchAllAssociative();
        $results = [];
        foreach ($search as $item) {
            $results[$item['side']] = (int)$item['points'];
        }
        $results['RED'] = $results['RED'] ?? 0;
        $results['BLUE'] = $results['BLUE'] ?? 0;
        $results['total'] = $results['BLUE'] + $results['RED'];

        return $results;
    }

    /**
     * @param Server $server
     * @param string $side
     * @param Tour|null $tour
     * @param null $limit
     * @return array
     * @throws Exception
     * @throws \Doctrine\DBAL\Driver\Exception
     */
    public function getTopGroundAssaults(Server $server, $side = self::RED, Tour $tour = null, $limit = null): array
    {
        $em = $this->getEntityManager();
        $table = $em->getClassMetadata(Kill::class)->getTableName();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $whereClause = null;
        if (!empty($tour)) {
            $whereClause = " AND {$table}.tour_id={$tour->getId()}";
        }
        $sql = "
            SELECT
                SUM({$table}.points) AS points,
                {$pilotsTable}.username,
                   {$pilotsTable}.country,
                $pilotsTable.id
            FROM `{$table}`
            INNER JOIN {$pilotsTable} ON {$pilotsTable}.id={$table}.pilot_id
            WHERE {$table}.friendly != 1 AND {$table}.side='{$side}' {$whereClause} AND {$table}.server_id={$server->getId()}
            GROUP BY {$table}.pilot_id
            ORDER BY points DESC";
        if (!empty($limit)) {
            $sql .= " LIMIT {$limit}";
        }

        return $em->getConnection()->executeQuery($sql)->fetchAllAssociative();
    }

    public function getKillsByDay($side, Server $server = null, Tour $tour = null)
    {
        $em = $this->getEntityManager();
        $table = $em->getClassMetadata(Kill::class)->getTableName();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $whereClause = '';

        if (!empty($server)) {
            $whereClause .= " AND {$table}.server_id = {$server->getId()}";
        }
        if (!empty($tour)) {
            $whereClause .= "  AND {$table}.tour_id={$tour->getId()}";
        }

        $sql = "
            SELECT
                SUM({$table}.points) AS kills,
                DATE_FORMAT({$table}.kill_time, '%Y-%m-%d') AS kill_day
            FROM `{$table}`
            INNER JOIN {$pilotsTable} ON {$pilotsTable}.id={$table}.pilot_id
            WHERE {$table}.friendly = 0 AND {$table}.side = '{$side}' {$whereClause}
            GROUP BY kill_day
            ORDER BY kill_day ASC
        ";
        return $em->getConnection()->executeQuery($sql)->fetchAllAssociative();
    }


    public function getKillsInfo(Server $server, Tour $tour = null)
    {
        $em = $this->getEntityManager();
        $table = $em->getClassMetadata(Kill::class)->getTableName();
        $sql = "
            SELECT 
                side AS side,
                COUNT(id) AS kills
            FROM `{$table}` 
            WHERE server_id = {$server->getId()}
        ";
        if (!empty($tour)) {
            $sql .= " AND tour_id={$tour->getId()}";
        }

        $sql .= " GROUP BY side";
        $queryResult = $em->getConnection()->executeQuery($sql)->fetchAllAssociative();
        $results = array();
        foreach ($queryResult as $item) {
            $results[$item['side']] = (int)$item['kills'];
        }
        if (!isset($results['RED'])) {
            $results['RED'] = 0;
        }
        if (!isset($results['BLUE'])) {
            $results['BLUE'] = 0;
        }

        if (($results['BLUE'] + $results['RED']) == 0) {
            $results['total'] = 1;
        } else {
            $results['total'] = $results['RED'] + $results['BLUE'];
        }

        return $results;
    }


}
