<?php

namespace App\Repository;

use App\Entity\BestStreak;
use App\Entity\Pilot;
use App\Entity\Server;
use App\Entity\Streak;
use App\Entity\Tour;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\ORMException;
use Exception;

/**
 * StreakRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StreakRepository extends EntityRepository
{
    /**
     * @param Pilot $pilot
     * @param Server $server
     * @param $isAir
     * @param $streak
     * @return bool
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function updateStreaks(Pilot $pilot, Server $server, $isAir, $streak): bool
    {
        $em = $this->getEntityManager();
        $tour = $em->getRepository(Tour::class)->getCurrentTour();
        $currentStreak = $em->getRepository(Streak::class)->findOneBy([
            'server' => $server,
            'tour' => $tour,
            'pilot' => $pilot,
            'air' => $isAir,
            'current' => true,
        ]);
        $bestStreak = $em->getRepository(Streak::class)->findOneBy([
            'server' => $server,
            'pilot' => $pilot,
            'air' => $isAir,
            'current' => false,
        ]);

        if (empty($currentStreak)) {
            $currentStreak = new Streak();
            $currentStreak->setServer($server);
            $currentStreak->setPilot($pilot);
            $currentStreak->setTour($tour);
            $currentStreak->setAir($isAir);
            $currentStreak->setCurrent(true);
        }
        if (empty($bestStreak)) {
            $bestStreak = new Streak();
            $bestStreak->setServer($server);
            $bestStreak->setPilot($pilot);
            $bestStreak->setAir($isAir);
            $bestStreak->setCurrent(false);
        }
        $currentStreak->setStreak($currentStreak->getStreak() + $streak);
        if ($currentStreak->getStreak() > $bestStreak->getStreak()) {
            $bestStreak->setStreak($currentStreak->getStreak());
            $em->persist($bestStreak);
        }
        $em->persist($currentStreak);
        $em->flush();
        return true;
    }

    /**
     * @param Pilot $pilot
     * @param Server $server
     * @param $isAir
     * @return bool
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function resetStreaks(Pilot $pilot, Server $server, $isAir): bool
    {
        $em = $this->getEntityManager();
        $tour = $em->getRepository(Tour::class)->getCurrentTour();
        $currentStreak = $em->getRepository(Streak::class)->findOneBy([
            'server' => $server,
            'tour' => $tour,
            'pilot' => $pilot,
            'air' => $isAir,
            'current' => true,
        ]);

        if (empty($currentStreak)) {
            $currentStreak = new Streak();
            $currentStreak->setServer($server);
            $currentStreak->setPilot($pilot);
            $currentStreak->setTour($tour);
            $currentStreak->setAir($isAir);
            $currentStreak->setCurrent(true);
        }
        $currentStreak->setStreak(0);

        $em->persist($currentStreak);
        $em->flush();
        return true;
    }
}
