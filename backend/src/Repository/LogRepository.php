<?php

namespace App\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogRepository extends BaseRepository
{
    public const TYPE_ERROR = 'TYPE_ERROR';
    public const TYPE_PARSER_ERROR = 'TYPE_PARSER_ERROR';
    public const TYPE_JSON_ERROR = 'TYPE_JSON_ERROR';
    public const TYPE_DB_ERROR = 'TYPE_DB_ERROR';
    public const TYPE_OK = 'TYPE_OK';


    public const INITIATOR_COMMAND = 'command';
    public const INITIATOR_REPOSITORY = 'repository';
    public const INITIATOR_SERVER = 'server';
    public const EVENT_PARSING = 'parsing';
    public const EVENT_SENDING_REPORT = 'sending_report';
    public const EVENT_FINISH_FLIGHT = 'finish_flight';

    public static $perPageValues = [5, 10, 20, 30, 50, 75, 100];

    public static $types = array(
        self::TYPE_ERROR => self::TYPE_ERROR,
        self::TYPE_DB_ERROR => self::TYPE_DB_ERROR,
        self::TYPE_PARSER_ERROR => self::TYPE_PARSER_ERROR,
        self::TYPE_JSON_ERROR => self::TYPE_JSON_ERROR,
    );

    public function findByPage($page = 1, $max = 10, array $options = []): Paginator
    {
        $dql = $this->createQueryBuilder('logs');


        if (isset($options['start'], $options['end'])) {
            $dql
                ->where('logs.createTime BETWEEN :dayStart AND :dayEnd')
                ->setParameter('dayStart', $options['start'])
                ->setParameter('dayEnd', $options['end'])
            ;
        }

        if (!isset($options['search'])) {
            $dql
                ->andWhere($dql->expr()->like('logs.message', ':content'))
                ->setParameter('content', "%{$options['search']}%")
            ;
        }
        $dql
            ->orderBy('logs.id','DESC')
        ;
        $firstResult = ($page - 1) * $max;
        $query = $dql->getQuery();
        $query->setFirstResult($firstResult);
        $query->setMaxResults($max);

        $paginator = new Paginator($query);

        if(($paginator->count() <=  $firstResult) && $page !== 1) {
            throw new NotFoundHttpException('Page not found');
        }

        return $paginator;
    }
}
