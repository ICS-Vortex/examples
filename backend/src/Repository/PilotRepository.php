<?php

namespace App\Repository;

use App\Entity\BestStreak;
use App\Entity\Dogfight;
use App\Entity\Elo;
use App\Entity\Event;
use App\Entity\Kill;
use App\Entity\Level;
use App\Entity\Model\Initiator;
use App\Entity\Pilot;
use App\Entity\Plane;
use App\Entity\RegistrationTicket;
use App\Entity\Server;
use App\Entity\Sortie;
use App\Entity\Streak;
use App\Entity\Tour;
use App\Entity\Unit;
use App\Entity\UnitType;
use App\Helper\Helper;
use Doctrine\DBAL\DBALException;
use Doctrine\DBAL\Driver\Exception;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\ORMException;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Monolog\Logger;
use PDO;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * PilotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PilotRepository extends BaseUserRepository
{
    const PER_PAGE = 12;

    public static array $restrictedSymbols = ['#', '-', '=', '+', '/', '\\', '~', '[', ']', '{', '}', '$', '*', '^', '@', '%', '(', ')'];

    public function findByPage($page, array $options)
    {
        $dql = $this->createQueryBuilder('pilot');
        if (!empty($options['callsign'])) {
            $dql->andWhere(
                $dql->expr()->like('pilot.username', ':callsign')
            )->setParameter('callsign', "%{$options['callsign']}%");
        }

        if (!empty($options['status'])) {
            $dql->andWhere('pilot.online = :active')->setParameter('active', boolval($options['status']));
        }

        $dql->orderBy('pilot.username', 'ASC');

        $firstResult = ($page - 1) * self::PER_PAGE;

        $query = $dql->getQuery();
        $query->setFirstResult($firstResult);
        $query->setMaxResults(self::PER_PAGE);

        $paginator = new Paginator($query);

        if (($paginator->count() <= $firstResult) && $page != 1) {
            throw new NotFoundHttpException('Page not found');
        }

        return $paginator;
    }

    /**
     * @param $class
     * @return bool
     */
    public function supportsClass($class): bool
    {
        return $class === Pilot::class;
    }

    public static function calculateFlightTime($time)
    {
        $sec = $time % 60;
        $time = floor($time / 60);
        $min = $time % 60;
        $time = floor($time / 60);
        if ($sec < 10) {
            $sec = "0" . $sec;
        }
        if ($min < 10) {
            $min = "0" . $min;
        }
        if ($time < 10) {
            $time = "0" . $time;
        }
        $total = $time . ":" . $min . ":" . $sec;
        return $total;
    }

    /**
     * @param Pilot $pilot
     * @param Server $server
     * @return array
     * @throws Exception
     * @throws \Doctrine\DBAL\Exception
     */
    public function getPilotPlanesWithHours(Pilot $pilot, Server $server): array
    {
        $entityManager = $this->getEntityManager();
        $pilotsTable = $entityManager->getClassMetadata(Pilot::class)->getTableName();
        $planesTable = $entityManager->getClassMetadata(Plane::class)->getTableName();
        $sortiesTable = $entityManager->getClassMetadata(Sortie::class)->getTableName();
        $dogfightsTable = $entityManager->getClassMetadata(Dogfight::class)->getTableName();
        $sql = "
            SELECT
            	{$planesTable}.id AS id,
                {$planesTable}.name AS title,
                {$planesTable}.image AS image,
                {$planesTable}.red_image AS red_image,
                {$planesTable}.blue_image AS blue_image,
                flights.total_time AS total_time,
                flights.flights AS flights,
                IFNULL(kills.kills, 0) AS kills
            FROM {$pilotsTable}
            LEFT JOIN (
                SELECT pilot_id, SUM(total_time) AS total_time,plane_id, COUNT(id) AS flights
                FROM {$sortiesTable}
                WHERE pilot_id={$pilot->getId()} AND server_id={$server->getId()}
                GROUP BY plane_id
            ) AS flights ON flights.pilot_id={$pilotsTable}.id
            LEFT JOIN {$planesTable} ON {$planesTable}.id=flights.plane_id
            LEFT JOIN(
                SELECT pilot_id, COUNT(id) AS kills,pilot_plane_id AS plane_id
                FROM {$dogfightsTable}
                WHERE pilot_id={$pilot->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_plane_id
            ) AS kills ON kills.pilot_id={$pilotsTable}.id AND kills.plane_id={$planesTable}.id
            WHERE {$pilotsTable}.id={$pilot->getId()}
        ";
        $search = $entityManager->getConnection()->executeQuery($sql)->fetchAllAssociative();
        $result = [];
        foreach ($search as $row) {
            $row['total_time'] = $this->formatTime($row['total_time']);
            $result[] = $row;
        }

        return $result;
    }

    /**
     * @param int $time
     * @return string
     */
    public function formatTime(int $time) : string
    {
        if ($time < 0) {
            return '00:00:00';
        }
        $sec = $time % 60;
        $time = floor($time / 60);
        $min = $time % 60;
        $time = floor($time / 60);
        if ($sec < 10) {
            $sec = "0" . $sec;
        }
        if ($min < 10) {
            $min = "0" . $min;
        }
        if ($time < 10) {
            $time = "0" . $time;
        }
        return $time . ":" . $min . ":" . $sec;
    }

    /**
     * @param Server $server
     * @return array
     */
    public function getPilotsAirInfo(Server $server): array
    {
        $em = $this->getEntityManager();
        $pilotsTable = $this->getClassMetadata()->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $killsTable = $em->getClassMetadata(Kill::class)->getTableName();
        $tempStreaksTable = $em->getClassMetadata(Streak::class)->getTableName();
        $bestStreaksTable = $em->getClassMetadata(BestStreak::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();

        $sql = "
            SELECT
                {$pilotsTable}.username AS callsign,
                {$pilotsTable}.id AS id,
                {$pilotsTable}.country AS country,
                IFNULL(flight_hours.total, 0) AS totalFlightTime,
                IFNULL(dogfight_loses.loses, 0) AS dogfightLoses,
                flight_side.side AS side,
                IFNULL(last_streak.streak, 0) AS tempStreak,
                IFNULL(best_streak.streak, 0) AS bestStreak,
                IFNULL(count_death.death, 0) AS died,
                IFNULL(fails_flights.fails, 0) AS crashed,
                IFNULL(dogfights.victims, 0) AS airWins,
                IFNULL(takeoffs.count_takeoffs,0) AS takeoffsCount,
                IFNULL(landings.count_landings,0) AS landingsCount,
                IFNULL(emergency_landings.emergency_lands, 0) AS emergencyLandings ,
                IFNULL(total_air_points.air_points,0) AS points,
                ROUND(dogfights.victims/IFNULL(count_death.death, 1), 2) AS kd,
                IFNULL(((IFNULL(total_air_points.air_points,0))/IFNULL(takeoffs.count_takeoffs, 1))
                *
                (landings.count_landings/IFNULL(takeoffs.count_takeoffs,1))*((IFNULL(takeoffs.count_takeoffs,1)-(IFNULL(count_death.death, 0)))/IFNULL(takeoffs.count_takeoffs, 1)), 0)
                AS ranking
            FROM {$pilotsTable}
            LEFT JOIN
                 (SELECT pilot_id, SUM(total_time) AS total FROM {$sortiesTable}
                    WHERE {$sortiesTable}.server_id={$server->getId()}
                    GROUP BY pilot_id
                 )AS flight_hours
            ON flight_hours.pilot_id={$pilotsTable}.id
            LEFT JOIN
                (SELECT pilot_id,GROUP_CONCAT(DISTINCT side ORDER BY side ASC SEPARATOR ', ') AS side
                FROM(
                    SELECT pilot_id,side,count(*),server_id AS cc
                    FROM {$sortiesTable} a
                    WHERE server_id={$server->getId()}
                    GROUP BY pilot_id,side
                ) a
                WHERE cc=(
                    SELECT max(cc) FROM (
                        SELECT pilot_id,side,COUNT(*) AS cc, server_id
                        FROM {$sortiesTable} a
                        WHERE a.server_id={$server->getId()}
                        GROUP BY pilot_id,side
                    )AS b
                    WHERE b.pilot_id=a.pilot_id AND b.server_id={$server->getId()}
                )
                GROUP BY pilot_id
            )AS flight_side
            ON flight_side.pilot_id={$pilotsTable}.id
            LEFT JOIN(
                SELECT pilot_id, COUNT(unit_id) AS total_kill, server_id
                FROM {$killsTable}
                WHERE {$killsTable}.server_id={$server->getId()}
                GROUP BY pilot_id
            ) AS ground_kills
              ON ground_kills.pilot_id={$pilotsTable}.id AND ground_kills.server_id={$server->getId()}
            LEFT JOIN
               (SELECT pilot_id, event, COUNT(event) as death,server_id
                FROM  `{$eventsTable}`
                WHERE event =  'DEATH' AND {$eventsTable}.server_id={$server->getId()}
                GROUP BY pilot_id
               ) AS count_death ON count_death.pilot_id={$pilotsTable}.id AND count_death.server_id={$server->getId()}
            LEFT JOIN (SELECT pilot_id, event, COUNT(event) AS fails
                FROM  `{$eventsTable}`
                WHERE event =  'CRASH' AND {$eventsTable}.server_id={$server->getId()}
                GROUP BY pilot_id
               ) AS fails_flights ON fails_flights.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, event, COUNT(event) AS count_takeoffs
                FROM  `{$eventsTable}`
                WHERE event =  'TAKEOFF' AND {$eventsTable}.server_id={$server->getId()}
                GROUP BY pilot_id
            ) AS takeoffs ON takeoffs.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, event, COUNT(event) AS count_landings
                FROM  `{$eventsTable}`
                WHERE event =  'LANDING' AND {$eventsTable}.server_id={$server->getId()}
                GROUP BY pilot_id
               ) AS landings ON landings.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, event, COUNT(event) AS emergency_lands
                FROM  `{$eventsTable}`
                WHERE event =  'CRASHLANDING' AND {$eventsTable}.server_id={$server->getId()}
                GROUP BY pilot_id
            ) AS emergency_landings ON emergency_landings.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id,COUNT(pilot_id) AS victims
                FROM {$dogfightsTable}
                WHERE {$dogfightsTable}.server_id={$server->getId()}
                GROUP BY pilot_id
            )AS dogfights ON dogfights.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT victim_id,COUNT(victim_id) AS loses
                FROM {$dogfightsTable}
                GROUP BY victim_id
            )AS dogfight_loses ON dogfight_loses.victim_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, SUM(points) AS ground_points
                FROM {$killsTable}
                WHERE {$killsTable}.server_id={$server->getId()}
                GROUP BY pilot_id
            )
            AS total_ground_points ON total_ground_points.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id,SUM(points) AS air_points
                FROM {$dogfightsTable}
                WHERE {$dogfightsTable}.server_id={$server->getId()}
                GROUP BY pilot_id
            )
            AS total_air_points ON total_air_points.pilot_id={$pilotsTable}.id
            LEFT JOIN(
                SELECT
                    pilot_id,
                    COUNT(streak) as streak
                FROM {$tempStreaksTable}
                WHERE server_id={$server->getId()}
                GROUP BY pilot_id
            ) AS last_streak ON last_streak.pilot_id={$pilotsTable}.id
            LEFT JOIN(
                SELECT
                    pilot_id,
                    streak
                FROM {$bestStreaksTable}
                WHERE server_id={$server->getId()}
            ) AS best_streak ON best_streak.pilot_id={$pilotsTable}.id
            WHERE flight_hours.total > 0
            ORDER BY ranking DESC
            LIMIT 100
        ";
        $entityManager = $this->getEntityManager();
        try {
            $result = $entityManager->getConnection()->query($sql)->fetchAll();
            $resultArray = array();
            foreach ($result as $item) {
                $item['ranking'] = (float)(empty($item['ranking']) ? 0 : $item['ranking']);
                $item['totalFlightTime'] = self::calculateFlightTime($item['totalFlightTime']);
                $resultArray[] = $item;
            }
            return $resultArray;
        } catch (DBALException $e) {
            return [];
        }
    }

    public function getPilotKills(Pilot $pilot, Server $server)
    {
        $pilotId = $pilot->getId();
        $em = $this->getEntityManager();
        $unitsTable = $em->getClassMetadata(Unit::class)->getTableName();
        $killsTable = $em->getClassMetadata(Kill::class)->getTableName();
        $unitsTypeTable = $em->getClassMetadata(UnitType::class)->getTableName();
        $sql = "
            SELECT {$unitsTypeTable}.title AS title,
                COUNT({$killsTable}.unit_id) AS kills
            FROM {$killsTable}
            LEFT JOIN (
                SELECT
                    DISTINCT `name`,
                    `id`,
                    `unit_type_id`
                FROM {$unitsTable}
            )AS units ON units.id={$killsTable}.unit_id
            LEFT JOIN {$unitsTypeTable} ON {$unitsTypeTable}.id=units.unit_type_id
            WHERE {$killsTable}.pilot_id={$pilotId} AND {$killsTable}.server_id={$server->getId()}
            GROUP BY {$unitsTypeTable}.title
        ";
        try {
            return $em->getConnection()->query($sql)->fetchAll();
        } catch (DBALException $e) {
            return [];
        }
    }

    public function getFlightEvents(Pilot $pilot, Server $server): array
    {
        $entityManager = $this->getEntityManager();

        $eventsTable = $entityManager->getClassMetadata(Event::class)->getTableName();
        $sql = "
            SELECT `event`, COUNT(id) AS counts FROM `{$eventsTable}`
            WHERE `pilot_id` = {$pilot->getId()} AND `server_id`={$server->getId()}
            GROUP BY `event`
        ";
        try {
            $result = $entityManager->getConnection()->query($sql)->fetchAll();
            return array(
                Event::TAKEOFF => $this->filterEvents(Event::TAKEOFF, $result),
                Event::LANDING => $this->filterEvents(Event::LANDING, $result),
                Event::CRASHLANDING => $this->filterEvents(Event::CRASHLANDING, $result),
                Event::CRASH => $this->filterEvents(Event::CRASH, $result),
                Event::DEATH => $this->filterEvents(Event::DEATH, $result),
                Event::EJECT => $this->filterEvents(Event::EJECT, $result),
                Event::DISCONNECT => $this->filterEvents(Event::DISCONNECT, $result),
            );
        } catch (DBALException $e) {
            return [];
        }
    }

    private function filterEvents($seekingEvent, $events)
    {
        foreach ($events as $event) {
            if ($event['event'] == $seekingEvent) {
                return $event['counts'];
            }
        }

        return 0;
    }

    public function getPilotGeneralInfo(Pilot $pilot, Server $server)
    {
        $pilotId = $pilot->getId();
        $entityManager = $this->getEntityManager();
        $tour = $entityManager->getRepository(Tour::class)->getCurrentTour();
        if (empty($tour)) {
            return [];
        }
        $pilotsTable = $entityManager->getClassMetadata(Pilot::class)->getTableName();
        $killsTable = $entityManager->getClassMetadata(Kill::class)->getTableName();
        $dogfightsTable = $entityManager->getClassMetadata(Dogfight::class)->getTableName();
        $streaksTable = $entityManager->getClassMetadata(Streak::class)->getTableName();
        $sortiesTable = $entityManager->getClassMetadata(Sortie::class)->getTableName();
        $eventsTable = $entityManager->getClassMetadata(Event::class)->getTableName();
        $eloTable = $entityManager->getClassMetadata(Elo::class)->getTableName();
        $eloType = EloRepository::ELO_TYPE_SIDE_GENERAL;

        $deathEvent = Event::DEATH;
        $query = ("
            SELECT
              {$pilotsTable}.id AS id,
              {$pilotsTable}.username AS callsign,
              {$pilotsTable}.country AS country,
              IFNULL(pilots_kills.kills, 0) AS groundKills,
              IFNULL(pilots_kills.points, 0) AS groundPoints,
              IFNULL(dogfights.killed, 0) AS killed,
              IFNULL(crnt_air_streak.streak, 0) AS currentAirStreak,
              IFNULL(crnt_ground_streak.streak, 0) AS currentGroundStreak,
              IFNULL(best_air_streak.streak, 0) AS bestAirStreak,
              IFNULL(best_ground_streak.streak, 0) AS bestGroundStreak,
              IFNULL(death_events.died, 0) AS died,
              IFNULL(red_elo.rating, 1000) AS redElo,
              IFNULL(blue_elo.rating, 1000) AS blueElo,
              flight_hours.hours AS hours
            FROM {$pilotsTable}
            LEFT JOIN {$streaksTable} crnt_ground_streak ON crnt_ground_streak.pilot_id={$pilotsTable}.id
                AND crnt_ground_streak.is_air = 0 AND crnt_ground_streak.tour_id = {$tour->getId()}
            LEFT JOIN {$streaksTable} crnt_air_streak ON crnt_air_streak.pilot_id={$pilotsTable}.id
                AND crnt_air_streak.is_air = 1 AND crnt_air_streak.tour_id = {$tour->getId()}
            LEFT JOIN {$streaksTable} best_air_streak ON best_air_streak.pilot_id={$pilotsTable}.id
                AND best_air_streak.is_air = 1 AND crnt_air_streak.tour_id IS NULL
            LEFT JOIN {$streaksTable} best_ground_streak ON best_ground_streak.pilot_id={$pilotsTable}.id
                AND best_ground_streak.is_air = 1 AND best_ground_streak.tour_id IS NULL
            LEFT JOIN {$eloTable} red_elo on red_elo.side = 'RED' AND red_elo.`type` = '{$eloType}'
                AND red_elo.server_id={$server->getId()} and red_elo.tour_id IS NULL AND red_elo.pilot_id={$pilot->getId()}
            LEFT JOIN {$eloTable} blue_elo on blue_elo.side = 'BLUE' AND blue_elo.`type` = '{$eloType}'
                AND blue_elo.server_id={$server->getId()} and blue_elo.tour_id IS NULL AND blue_elo.pilot_id={$pilot->getId()}
            LEFT JOIN (
              SELECT pilot_id, COUNT(pilot_id) AS kills, SUM(points) as points
              FROM {$killsTable}
              WHERE server_id={$server->getId()}
              GROUP BY pilot_id
            ) AS pilots_kills ON pilots_kills.pilot_id={$pilotsTable}.id
            LEFT JOIN (
              SELECT pilot_id, COUNT(pilot_id) AS killed
              FROM {$dogfightsTable}
              WHERE server_id={$server->getId()} and in_air IS NOT NULL AND is_pvp = 1 AND in_air IS NOT NULL
              GROUP BY pilot_id
            ) AS dogfights ON dogfights.pilot_id={$pilotsTable}.id
            LEFT JOIN (
              SELECT pilot_id, SUM(total_time) AS hours
              FROM {$sortiesTable}
              WHERE server_id={$server->getId()}
              GROUP BY pilot_id
            )AS flight_hours ON flight_hours.pilot_id = {$pilotsTable}.id
            LEFT JOIN (
              SELECT pilot_id, COUNT(pilot_id) AS died
              FROM {$eventsTable}
              WHERE server_id={$server->getId()} AND event = '{$deathEvent}'
              GROUP BY pilot_id
            )AS death_events ON death_events.pilot_id = {$pilotsTable}.id
            WHERE {$pilotsTable}.id = $pilotId
        ");
        $result = $entityManager->getConnection()->executeQuery($query)->fetchAssociative();
        if (empty($result)) {
            return null;
        }
        $result['hours'] = Helper::calculateFlightTime(intval($result['hours']));
        $result['id'] = intval($result['id']);
        $result['groundKills'] = intval($result['groundKills']);
        $result['killed'] = intval($result['killed']);
        $result['currentAirStreak'] = intval($result['currentAirStreak']);
        $result['currentGroundStreak'] = intval($result['currentGroundStreak']);
        $result['bestAirStreak'] = intval($result['bestAirStreak']);
        $result['bestGroundStreak'] = intval($result['bestGroundStreak']);
        $result['died'] = intval($result['died']);
        $result['redElo'] = intval($result['redElo']);
        $result['blueElo'] = intval($result['blueElo']);
        $result['groundPoints'] = intval($result['groundPoints']);
        return $result;
    }

    public function getPlanesInfoWithFlights(Pilot $pilot)
    {
        $em = $this->getEntityManager();
        $id = $pilot->getId();
        $query = "
            SELECT
                dcs_planes.name AS plane,
                COUNT(dcs_flight_hours.id) AS flights
            FROM dcs_flight_hours
            LEFT JOIN dcs_planes ON dcs_planes.id = dcs_flight_hours.plane_id
            WHERE pilot_id=$id
            GROUP BY plane_id
        ";
        $result = $em->getConnection()->executeQuery($query)->fetchAll();
        return $result;
    }

    public function getLastComments(Pilot $pilot)
    {
        $em = $this->getEntityManager();

        $queryBuilder = $em->createQueryBuilder();
        $comments = $queryBuilder->select('comment')
            ->from('WebSchoolBundle:TaskComment', 'comment')
            ->where('comment.author=:author')
            ->setParameter('author', $pilot)
            ->orderBy('comment.updateTime', 'DESC')
            ->setMaxResults(10)
            ->getQuery()->getResult();
        return $comments;
    }

    public function getPilotGroupsIds(Pilot $pilot)
    {
        $id = $pilot->getId();
        $em = $this->getEntityManager();
        $sql = "
            SELECT DISTINCT group_id FROM students_groups WHERE student_id={$id}
        ";

        $groups = $em->getConnection()->executeQuery($sql)->fetchAll();
        return $groups;
    }

    public function getAllInfo(Pilot $pilot)
    {
        $em = $this->getEntityManager();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $query = "
            SELECT
                {$pilotsTable}.*,
                {$sortiesTable}.*
            FROM {$pilotsTable}
            INNER JOIN {$sortiesTable} ON {$sortiesTable}.pilot_id={$pilotsTable}.id
            WHERE {$pilotsTable}.id={$pilot->getId()}
        ";
        $result = $em->getConnection()->query($query)->fetchAll();
        return $result;
    }

    /**
     * @param Pilot $pilot
     * @return array
     * @throws DBALException
     */
    public function getPilotServers(Pilot $pilot): array
    {
        $em = $this->getEntityManager();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $query = "
            SELECT
                DISTINCT server_id as id
            FROM {$sortiesTable}
            WHERE pilot_id = {$pilot->getId()}
            ORDER BY id ASC
        ";
        $result = [];
        foreach ($em->getConnection()->query($query)->fetchAll() as $row) {
            $server = $em->getRepository(Server::class)->findOneById($row['id']);
            if (!empty($server)) {
                $result[] = $server;
            }
        }

        return $result;
    }

    /**
     * @param Pilot|null $pilot
     * @return bool
     */
    public function checkRegistrationTicket(Pilot $pilot = null)
    {
        $em = $this->getEntityManager();
        if (empty($pilot)) {
            return false;
        }
        /** @var RegistrationTicket $ticket */
        $ticket = $em->getRepository(RegistrationTicket::class)->findOneBy(['pilot' => $pilot]);
        if (empty($ticket)) {
            return false;
        }

        $now = time();
        $deadline = strtotime($ticket->getDeadline()->format('Y-m-d H:i:s'));
        try {
            if ($now <= $deadline) {
                $ticket->setAccepted();
                $em->merge($ticket);
                $em->flush();
                return true;
            }
            $em->remove($ticket);
            $em->flush();
            return false;
        } catch (ORMException $e) {
            return false;
        }

    }

    /**
     * @param $initiator
     * @return Pilot|null
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function getPilot($initiator): ?Pilot
    {
        $callsign = $initiator->getNick();
        $ucid = $initiator->getId();
        $ip = $initiator->getIp();
        $em = $this->getEntityManager();
        $pilot = $this->findOneBy([
            'ucid' => $ucid
        ]);
        if (empty($pilot)) {
            $pilot = new Pilot();
            $pilot->setNickname($callsign);
            $pilot->setIpAddress($ip);
            $pilot->addRole(BaseUserRepository::ROLE_PILOT);
            $pilot->setUcid($ucid);

            $locationDetails = $this->getPilotLocationDataByIp($ip);
            if (!empty($locationDetails)) {
                $pilot->setLocation($locationDetails['location']);
                $pilot->setIpCountry($locationDetails['country']);
            }

            $em->persist($pilot);
            $em->flush();
            return $pilot;
        }

        $updateFlag = false;
        $checkCountryFlag = false;
        if ($callsign !== $pilot->getCallsign()) {
            $pilot->setCallsign($callsign);
            $updateFlag = true;
        }

        if (!empty($ip) && $pilot->getIpAddress() !== $ip) {
            $pilot->setIpAddress($ip);
            $updateFlag = true;
            $checkCountryFlag = true;
        }

        if (empty($pilot->getCountry()) || $checkCountryFlag === true) {
            $locationDetails = $this->getPilotLocationDataByIp($pilot->getIpAddress());
            if (!empty($locationDetails) && isset($locationDetails['country']) && !empty($locationDetails['country'])) {
                $pilot->setIpCountry($locationDetails['country']);
                $pilot->setLocation($locationDetails['location']);
                $updateFlag = true;
            }
        }

        if ($updateFlag) {
            $em->persist($pilot);
            $em->flush();
        }

        return $pilot;
    }

    /**
     * @param Initiator $initiator
     * @return Pilot|null
     */
    public function getPilotByNickname(Initiator $initiator): ?Pilot
    {
        $nickname = $initiator->getNick();
        $this->log('Getting pilot object. Pilot: ' . $nickname, Logger::INFO, 'repository');

        /** @var Pilot $pilot */
        $pilot = $this->findOneBy(array(
            'username' => $nickname,
        ));

        return $pilot;
    }

    public function getPilotLocationDataByIp($ip)
    {
        $url = "http://ip-api.com/json/{$ip}";
        $this->log('Getting location data (external request) for IP ' . $ip . ' from URL ' . $url, Logger::INFO, 'repository');
        $details = json_decode(@file_get_contents($url), true);
        if (!empty($details) && isset($details['status']) && $details['status'] === 'success') {
            $this->log('Location data found', Logger::INFO, 'repository');
            return array(
                'country' => strtolower($details['countryCode']),
                'location' => $details['lat'] . ',' . $details['lon'],
            );
        }
        return null;
    }

    /**
     * @param Server $server
     * @param Tour|null $tour
     * @param null $limit
     * @param null $offset
     * @return array
     */
    public function getPilotsPvpRanking(Server $server, Tour $tour = null, $limit = null, $offset = null): array
    {
        $em = $this->getEntityManager();

        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $eloTable = $em->getClassMetadata(Elo::class)->getTableName();
        $type = EloRepository::ELO_TYPE_SIDE_TOUR;
        if (empty($tour)) {
            $tour = $em->getRepository(Tour::class)->getCurrentTour();
        }

        $sql = "
            SELECT
                  {$pilotsTable}.id AS id,
                  {$pilotsTable}.username AS callsign,
                  {$pilotsTable}.`country` AS `country`,
                  IFNULL(flight_hours.total, 0) AS flightTime,
                  IFNULL(count_death.death, 0) AS died,
                  (IFNULL(air_wins.airWins, 0) + IFNULL(air_loses.airLoses, 0)) AS airBattles,
                  IFNULL(air_wins.airWins, 0) AS airWins,
                  IFNULL(air_loses.airLoses, 0) AS airLoses,
                  IFNULL(ground_dogfights.victims, 0) AS groundKills,
                  IFNULL(flight_hours.sorties,0) AS sorties,
                  IFNULL(landings.count_landings,0) AS landings,
                  IFNULL(red_elo.rating, 0) AS redElo,
                  IFNULL(blue_elo.rating, 0) AS blueElo,
                  IF(IFNULL(red_elo.rating, 0) >= IFNULL(blue_elo.rating, 0), IFNULL(red_elo.rating, 0), IFNULL(blue_elo.rating, 0)) AS bestElo,
                  IF(IFNULL(red_elo.rating, 0) >= IFNULL(blue_elo.rating, 0), 'RED', 'BLUE') AS bestEloParam
            FROM {$pilotsTable}
            INNER JOIN (
                SELECT pilot_id, SUM(total_time) AS total, COUNT(id) AS sorties
                FROM {$sortiesTable}
                WHERE tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id
            )AS flight_hours ON flight_hours.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, COUNT(pilot_id) AS airWins
                FROM {$dogfightsTable}
                WHERE friendly = 0 AND in_air = 1 AND victim_id IS NOT NULL AND tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id
            )AS air_wins ON air_wins.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT victim_id as pilot_id, COUNT(victim_id) AS airLoses
                FROM {$dogfightsTable}
                WHERE friendly = 0 AND victim_id != '' AND tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY victim_id
            )AS air_loses ON air_loses.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, COUNT(pilot_id) AS victims
                FROM {$dogfightsTable}
                WHERE friendly = 0 AND in_air = 0 AND victim_id IS NOT NULL AND {$dogfightsTable}.tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id
            )AS ground_dogfights ON ground_dogfights.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, event, COUNT(event) as death,tour_id
                FROM  `{$eventsTable}`
                WHERE event = 'DEATH' AND {$eventsTable}.tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id
            ) AS count_death ON count_death.pilot_id={$pilotsTable}.id AND count_death.tour_id={$tour->getId()}
            LEFT JOIN (
                SELECT pilot_id, COUNT(id) AS count_landings
                FROM  `{$sortiesTable}`
                WHERE landing_airfield_id != '' AND tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id
            ) AS landings ON landings.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, rating
                FROM {$eloTable}
                WHERE side = 'RED' AND `type` = '{$type}' AND tour_id={$tour->getId()} AND server_id={$server->getId()}
            ) AS red_elo ON red_elo.pilot_id = {$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, rating
                FROM {$eloTable}
                WHERE side = 'BLUE' AND `type` = '{$type}' AND tour_id={$tour->getId()} AND server_id={$server->getId()}
            ) AS blue_elo ON blue_elo.pilot_id = {$pilotsTable}.id
            WHERE flight_hours.total > 0
            HAVING airBattles > 0
            ORDER BY bestElo DESC
        ";
        if (!empty($limit)) {
            $sql .= " LIMIT {$limit}";
            if (!empty($offset)) {
                $sql .= ", {$offset}";
            }
        }
        try {
            $result = $em->getConnection()->executeQuery($sql)->fetchAllAssociative();
            $resultArray = [];
            foreach ($result as $item) {
                $item['id'] = (int)$item['id'];
                $item['flightTime'] = self::calculateFlightTime((int)$item['flightTime']);
                $item['died'] = (int)$item['died'];
                $item['sorties'] = (int)$item['sorties'];
                $item['airBattles'] = (int)$item['airBattles'];
                $item['airWins'] = (int)$item['airWins'];
                $item['airLoses'] = (int)$item['airLoses'];
                $item['groundKills'] = (int)$item['groundKills'];
                $item['landings'] = (int)$item['landings'];
                $item['redElo'] = (int)$item['redElo'];
                $item['blueElo'] = (int)$item['blueElo'];
                $item['bestElo'] = (int)$item['bestElo'];
                $resultArray[] = $item;
            }
            return $resultArray;
        } catch (Exception | \Doctrine\DBAL\Exception $e) {
            // TODO add logging
            $log = $this->log($e->getMessage() . '. ' . $e->getTraceAsString(), Logger::ALERT);
            dd($log);
            return [];
        }

    }

    /**
     * @param Server $server
     * @param Tour|null $tour
     * @param null $limit
     * @param null $offset
     * @return array
     */
    public function getPilotsPlanesPvpRankingInfo(Server $server, Tour $tour = null, $limit = null, $offset = null): array
    {
        $em = $this->getEntityManager();

        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $planesTable = $em->getClassMetadata(Plane::class)->getTableName();
        $eloTable = $em->getClassMetadata(Elo::class)->getTableName();
        $type = EloRepository::ELO_TYPE_PLANE_TOUR;

        if (empty($tour)) {
            $tour = $em->getRepository(Tour::class)->getCurrentTour();
        }

        $sql = "
            SELECT
                pilots.id AS id,
                pilots.username AS callsign,
                pilots.country AS country,
                IFNULL(flights.takeoffs, 0) AS takeoffs,
                planes.name AS plane,
                planes.id AS planeId,
                IFNULL(air_wins.airWins, 0) AS airWins,
                IFNULL(air_loses.airLoses, 0) AS airLoses,
                (IFNULL(air_wins.airWins, 0) + IFNULL(air_loses.airLoses, 0)) AS airBattles,
                IFNULL(groundfights.dogfights, 0) AS groundKills,
                IFNULL(flights.flightTime, 0) AS flightTime,
                IFNULL(fl_events.died, 0) AS died,
                IFNULL(landings.landings, 0) AS landings,
                IFNULL(elo.rating, 1000) AS elo
            FROM `{$pilotsTable}`
            INNER JOIN(
                SELECT pilot_id, plane_id, COUNT(pilot_id) AS takeoffs, SUM(total_time) AS flightTime
                FROM sorties
                WHERE tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id, plane_id
            ) AS flights ON flights.pilot_id=pilots.id
            LEFT JOIN {$planesTable} ON {$planesTable}.id=flights.plane_id
            LEFT JOIN (
                SELECT pilot_id, pilot_plane_id AS plane_id, COUNT(pilot_id) AS airWins
                FROM {$dogfightsTable}
                WHERE friendly = 0 AND in_air = 1 AND victim_id != '' AND tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id, pilot_plane_id
            ) AS air_wins ON air_wins.pilot_id=flights.pilot_id AND air_wins.plane_id=flights.plane_id
            LEFT JOIN (
                SELECT victim_id AS pilot_id, victim_plane_id AS plane_id, COUNT(victim_id) AS airLoses
                FROM {$dogfightsTable}
                WHERE friendly = 0 AND in_air = 1 AND victim_id != '' AND tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY victim_id, victim_plane_id
            ) AS air_loses ON air_loses.pilot_id=flights.pilot_id AND air_loses.plane_id=flights.plane_id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS airBattles, pilot_id, pilot_plane_id AS plane_id
                FROM {$dogfightsTable}
                WHERE tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id, plane_id
            ) AS airbattles ON airbattles.pilot_id=flights.pilot_id AND airbattles.plane_id=flights.plane_id
            LEFT JOIN (
                SELECT pilot_id, COUNT(pilot_id) AS dogfights, pilot_plane_id AS plane_id
                FROM {$dogfightsTable}
                WHERE friendly = 0 AND in_air = 0 AND ai_id IS NULL AND victim_id IS NOT NULL AND {$dogfightsTable}.tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id
            ) AS groundfights ON groundfights.pilot_id = flights.pilot_id AND groundfights.plane_id = flights.plane_id
            LEFT JOIN (
                SELECT pilot_id, plane_id, COUNT(pilot_id) AS died
                FROM {$eventsTable}
                WHERE tour_id={$tour->getId()} AND event = 'DEATH' AND server_id={$server->getId()}
                GROUP BY pilot_id, plane_id
            ) AS fl_events ON fl_events.pilot_id=flights.pilot_id AND fl_events.plane_id=flights.plane_id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS landings, pilot_id, plane_id
                FROM {$sortiesTable}
                WHERE tour_id={$tour->getId()} AND (landing_airfield_id != NULL OR landing_airfield_id != '') AND server_id={$server->getId()}
                GROUP BY pilot_id, plane_id
            ) AS landings ON landings.pilot_id=flights.pilot_id AND landings.plane_id=flights.plane_id
            LEFT JOIN (
                SELECT pilot_id, rating, plane_id
                FROM {$eloTable}
                WHERE `type` = '{$type}' AND tour_id={$tour->getId()} AND server_id={$server->getId()} and side IS NULL
            ) AS elo ON elo.pilot_id = {$pilotsTable}.id AND elo.plane_id = flights.plane_id
        ";

        if (!empty($limit)) {
            $sql .= " LIMIT {$limit}";
            if (!empty($offset)) {
                $sql .= ", {$offset}";
            }
        }

        try {
            $search = $em->getConnection()->executeQuery($sql)->fetchAllAssociative();
            $result = [];
            foreach ($search as $item) {
                $item['id'] = (int)$item['id'];
                $item['flightTime'] = self::calculateFlightTime((int)$item['flightTime']);
                $item['died'] = (int)$item['died'];
                $item['airBattles'] = (int)$item['airBattles'];
                $item['airWins'] = (int)$item['airWins'];
                $item['airLoses'] = (int)$item['airLoses'];
                $item['groundKills'] = (int)$item['groundKills'];
                $item['elo'] = (int)$item['elo'];
                $item['planeId'] = (int)$item['planeId'];
                $item['landings'] = (int)$item['landings'];
                $item['takeoffs'] = (int)$item['takeoffs'];
                $result[] = $item;
            }
            return $result;
        } catch (Exception | \Doctrine\DBAL\Exception $e) {
            $this->log("Error: {$e->getMessage()} in file {$e->getFile()} at line {$e->getLine()}", Logger::ALERT, 'repository');
            return [];
        }
    }

    /**
     * @param Pilot $pilot
     * @param Server|null $server
     * @param Tour|null $tour
     * @return array|null
     * @throws DBALException
     */
    public function getPilotLevelData(Pilot $pilot, Server $server = null, Tour $tour = null)
    {
        $em = $this->getEntityManager();
        $result = [];
        $tourWhere = '';
        $serverWhere = '';
        if (!empty($tour)) {
            $tourWhere .= " AND tour_id={$tour->getId()}";
        }

        if (!empty($server)) {
            $serverWhere .= " AND server_id={$server->getId()}";
        }
        $pilotsTable = $this->getClassMetadata()->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $killsTable = $em->getClassMetadata(Kill::class)->getTableName();
        $levelsTables = $em->getClassMetadata(Level::class)->getTableName();
        $query = "
            SELECT
                IFNULL(kills.points, 0) + IFNULL(dogfights.points, 0) AS points
            FROM {$pilotsTable}
            LEFT JOIN (
                SELECT SUM(points) AS points, pilot_id
                FROM {$killsTable}
                WHERE pilot_id={$pilot->getId()} {$tourWhere} {$serverWhere}
                LIMIT 1
            ) AS kills ON kills.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT SUM(points) AS points, pilot_id
                FROM {$dogfightsTable}
                WHERE pilot_id={$pilot->getId()} {$tourWhere} {$serverWhere}
                LIMIT 1
            ) AS dogfights ON dogfights.pilot_id={$pilotsTable}.id
            WHERE {$pilotsTable}.id={$pilot->getId()}
        ";
        $result['points'] = (int)$em->getConnection()->query($query)->fetch(PDO::FETCH_ASSOC)['points'];

        $prevLevelQuery = "
            SELECT * FROM `{$levelsTables}`
            WHERE points < {$result['points']}
            ORDER BY `level` DESC
            LIMIT 1
        ";
        $prevLevel = $em->getConnection()->query($prevLevelQuery)->fetch(PDO::FETCH_ASSOC);
        if (!$prevLevel || empty($prevLevel)) {
            $prevLevel = [
                'id' => 0,
                'level' => 0,
                'points' => 0,
            ];
        }

        $nextLevelQuery = "
            SELECT * FROM `{$levelsTables}`
            WHERE points > {$result['points']}
            ORDER BY `level` ASC
            LIMIT 1
        ";
        $nextLevel = $em->getConnection()->query($nextLevelQuery)->fetch(PDO::FETCH_ASSOC);
        if (!$nextLevel) {
            $nextLevelQuery = "
            SELECT * FROM `{$levelsTables}`
            ORDER BY `level` DESC
            LIMIT 1
        ";
            $nextLevel = $em->getConnection()->query($nextLevelQuery)->fetch(PDO::FETCH_ASSOC);
        }
        if (!$nextLevel || empty($nextLevel)) {
            return null;
        }

        $result['currentLevel'] = $prevLevel;
        $result['nextLevel'] = $nextLevel;
        $result['pointsToLevel'] = (int)$result['nextLevel']['points'] - $result['points'];
        $result['currentPercent'] = round(($result['points'] - $result['currentLevel']['points']) * 100 / ($result['nextLevel']['points'] - $result['currentLevel']['points']));
        return $result;
    }

    public function getGeneralInfo(Pilot $pilot): array
    {
        $em = $this->getEntityManager();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $eventCrash = EventRepository::EVENT_CRASHED;
        $eventDeath = EventRepository::EVENT_DIED;

        $sql = "
            SELECT 'takeoffs' paramType, IFNULL(COUNT(id), 0) paramValue
            FROM {$sortiesTable}
            WHERE pilot_id = {$pilot->getId()}
            UNION
            SELECT 'victories' paramType, IFNULL(COUNT(id), 0) paramValue
            FROM {$dogfightsTable}
            WHERE pilot_id = {$pilot->getId()} AND is_pvp = 1 AND friendly = 0 AND victim_id IS NOT NULL
            UNION
            SELECT 'loses' paramType, IFNULL(COUNT(id), 0) paramValue
            FROM {$dogfightsTable}
            WHERE victim_id = {$pilot->getId()} AND is_pvp = 1
            UNION
            SELECT 'crashed' paramType, IFNULL(COUNT(id), 0) paramValue
            FROM {$eventsTable}
            WHERE pilot_id = {$pilot->getId()} AND event = '{$eventCrash}'
            UNION
            SELECT 'died' paramType, IFNULL(COUNT(id), 0) paramValue
            FROM {$eventsTable}
            WHERE pilot_id = {$pilot->getId()} AND event = '{$eventDeath}'
        ";


        try {
            $search = $em->getConnection()->executeQuery($sql)->fetchAllAssociative();
            $result = [];
            foreach ($search as $row) {
                $result[$row['paramType']] = (int)$row['paramValue'];
            }
            return $result;
        } catch (Exception | \Doctrine\DBAL\Exception $e) {
            $this->log("Error: {$e->getMessage()} in file {$e->getFile()} at line {$e->getLine()}", Logger::ALERT, 'repository');
            return [];
        }

    }


    /**
     * @param Server $server
     * @param Tour|null $tour
     * @param null $limit
     * @param null $offset
     * @return array
     */
    public function getPilotsPlanesPveRankingInfo(Server $server, Tour $tour = null, $limit = null, $offset = null): array
    {
        $em = $this->getEntityManager();

        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $killsTables = $em->getClassMetadata(Kill::class)->getTableName();
        $planesTable = $em->getClassMetadata(Plane::class)->getTableName();

        if (empty($tour)) {
            $tour = $em->getRepository(Tour::class)->getCurrentTour();
        }

        $sql = "
            SELECT
                pilots.id AS id,
                pilots.username AS callsign,
                pilots.country AS country,
                planes.name AS plane,
                planes.id AS planeId,
                IFNULL(ai_wins.aiKilled, 0) AS aiKills,
                IFNULL(groundKills.kills, 0) AS groundKills,
                (IFNULL(ai_wins.score, 0) + IFNULL(groundKills.score, 0) + IFNULL(seaKills.score, 0)) as score,
                IFNULL(seaKills.kills, 0) AS seaKills,
                IFNULL(flights.takeoffs, 0) AS takeoffs,
                IFNULL(flights.flightTime, 0) AS flightTime,
                IFNULL(flight_events.died, 0) AS died,
                IFNULL(landings.landings, 0) AS landings
            FROM `{$pilotsTable}`
            INNER JOIN(
                SELECT pilot_id, plane_id, COUNT(pilot_id) AS takeoffs, SUM(total_time) AS flightTime
                FROM sorties
                WHERE tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id, plane_id
            ) AS flights ON flights.pilot_id=pilots.id
            LEFT JOIN {$planesTable} ON {$planesTable}.id=flights.plane_id
            LEFT JOIN (
                SELECT pilot_id, pilot_plane_id AS plane_id, COUNT(pilot_id) AS aiKilled, SUM(points) as score
                FROM {$dogfightsTable}
                WHERE friendly = 0 AND in_air = 1 AND ai_id != '' AND tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id, pilot_plane_id
            ) AS ai_wins ON ai_wins.pilot_id=flights.pilot_id AND ai_wins.plane_id=flights.plane_id
            LEFT JOIN (
                SELECT pilot_id, plane_id AS plane_id, COUNT(pilot_id) AS kills, SUM(points) AS score
                FROM {$killsTables}
                WHERE friendly = 0 AND ground_kill = 1 AND tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id, plane_id
            ) AS groundKills ON groundKills.pilot_id=flights.pilot_id AND groundKills.plane_id=flights.plane_id
            LEFT JOIN (
                SELECT pilot_id, plane_id AS plane_id, COUNT(pilot_id) AS kills, SUM(points) AS score
                FROM {$killsTables}
                WHERE friendly = 0 AND sea_kill = 1 AND tour_id={$tour->getId()} AND server_id={$server->getId()}
                GROUP BY pilot_id, plane_id
            ) AS seaKills ON seaKills.pilot_id=flights.pilot_id AND seaKills.plane_id=flights.plane_id
            LEFT JOIN (
                SELECT pilot_id, plane_id, COUNT(pilot_id) AS died
                FROM {$eventsTable}
                WHERE tour_id={$tour->getId()} AND event = 'DEATH' AND server_id={$server->getId()}
                GROUP BY pilot_id, plane_id
            ) AS flight_events ON flight_events.pilot_id=flights.pilot_id AND flight_events.plane_id=flights.plane_id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS landings, pilot_id, plane_id
                FROM {$sortiesTable}
                WHERE tour_id={$tour->getId()} AND (landing_airfield_id != NULL OR landing_airfield_id != '') AND server_id={$server->getId()}
                GROUP BY pilot_id, plane_id
            ) AS landings ON landings.pilot_id=flights.pilot_id AND landings.plane_id=flights.plane_id
            ORDER BY score DESC
        ";

        if (!empty($limit)) {
            $sql .= " LIMIT {$limit}";
            if (!empty($offset)) {
                $sql .= ", {$offset}";
            }
        }

        try {
            $search = $em->getConnection()->executeQuery($sql)->fetchAllAssociative();
            $result = [];
            foreach ($search as $item) {
                $item['id'] = (int)$item['id'];
                $item['flightTime'] = self::calculateFlightTime((int)$item['flightTime']);
                $item['died'] = (int)$item['died'];
                $item['aiKills'] = (int)$item['aiKills'];
                $item['groundKills'] = (int)$item['groundKills'];
                $item['seaKills'] = (int)$item['seaKills'];
                $item['score'] = (int)$item['score'];
                $item['planeId'] = (int)$item['planeId'];
                $item['landings'] = (int)$item['landings'];
                $item['takeoffs'] = (int)$item['takeoffs'];
                $result[] = $item;
            }
            return $result;
        } catch (Exception | \Doctrine\DBAL\Exception $e) {
            $this->log("Error: {$e->getMessage()} in file {$e->getFile()} at line {$e->getLine()}", Logger::ALERT, 'repository');
            return [];
        }
    }

    public function getPilotA2AInfoByPlanes(Pilot $pilot, Server $server)
    {
        $em = $this->getEntityManager();

        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $eloTable = $em->getClassMetadata(Elo::class)->getTableName();
        $planesTable = $em->getClassMetadata(Plane::class)->getTableName();
        $eloType = EloRepository::ELO_TYPE_PLANE_GENERAL;
        $sql = "
            SELECT
                {$planesTable}.id id,
                {$planesTable}.name plane,
                IFNULL(dogfight_wins.battles, 0) airWins,
                IFNULL(dogfight_loses.battles, 0) airLoses,
                IFNULL(ground_dogfight_wins.battles, 0) groundKills,
                IFNULL(pilot_deaths.died, 0) died,
                IFNULL(pilot_plane_elo.rating, 1000) elo
            FROM {$planesTable}
            INNER JOIN (
                SELECT plane_id, pilot_id
                FROM sorties
                WHERE pilot_id = {$pilot->getId()} and server_id = {$server->getId()}
                group by plane_id
            ) as pilot_flights ON pilot_flights.plane_id = {$planesTable}.id
            LEFT JOIN {$pilotsTable} ON {$pilotsTable}.id = pilot_flights.pilot_id
            LEFT JOIN (
                SELECT COUNT(id) battles, pilot_plane_id
                FROM {$dogfightsTable}
                WHERE pilot_id = {$pilot->getId()} AND server_id = {$server->getId()}
                AND is_pvp = 1 and victim_id IS NOT NULL AND in_air = 1
                GROUP BY pilot_plane_id
            ) dogfight_wins ON dogfight_wins.pilot_plane_id = {$planesTable}.id
            LEFT JOIN (
                SELECT COUNT(id) battles, victim_plane_id
                FROM {$dogfightsTable}
                WHERE victim_id = {$pilot->getId()} AND server_id = {$server->getId()}
                AND is_pvp = 1 and ai_id IS NULL and in_air = 1
                GROUP BY victim_plane_id
            ) dogfight_loses ON dogfight_loses.victim_plane_id = {$planesTable}.id
            LEFT JOIN (
                SELECT COUNT(id) battles, pilot_plane_id
                FROM {$dogfightsTable}
                WHERE pilot_id = {$pilot->getId()} AND server_id = {$server->getId()}
                AND is_pvp = 1 and ai_id IS NULL AND in_air = 0
                GROUP BY pilot_plane_id
            ) ground_dogfight_wins ON ground_dogfight_wins.pilot_plane_id = {$planesTable}.id
            LEFT JOIN (
                SELECT COUNT(plane_id) died, plane_id
                FROM {$eventsTable}
                WHERE pilot_id = {$pilot->getId()} and event = 'DEATH' and server_id = {$server->getId()}
                GROUP BY plane_id
            ) as pilot_deaths ON pilot_deaths.plane_id = {$planesTable}.id
            LEFT JOIN (
                SELECT rating, plane_id
                FROM {$eloTable}
                WHERE pilot_id = {$pilot->getId()} AND server_id = {$server->getId()}
                AND type = '{$eloType}' and side IS NULL
            ) AS pilot_plane_elo ON pilot_plane_elo.plane_id = {$planesTable}.id
            ORDER BY plane ASC
        ";

        $result = [];
        foreach ($em->getConnection()->executeQuery($sql)->fetchAllAssociative() as $row) {
            $row['id'] = (int)$row['id'];
            $row['airWins'] = (int)$row['airWins'];
            $row['airLoses'] = (int)$row['airLoses'];
            $row['groundKills'] = (int)$row['groundKills'];
            $row['died'] = (int)$row['died'];
            $row['elo'] = (int)$row['elo'];
            $result[] = $row;
        }
        return $result;
    }


    public function getPilotA2GInfoByPlanes(Pilot $pilot, Server $server)
    {
        $em = $this->getEntityManager();

        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $killsTable = $em->getClassMetadata(Kill::class)->getTableName();
        $eloTable = $em->getClassMetadata(Elo::class)->getTableName();
        $planesTable = $em->getClassMetadata(Plane::class)->getTableName();
        $sql = "
            SELECT
                {$planesTable}.id id,
                {$planesTable}.name plane,
                IFNULL(ai_kills.battles, 0) aiKilled,
                IFNULL(ground_kills.destroyed, 0) groundKills,
                IFNULL(sea_kills.destroyed, 0) seaKills,
                IFNULL(ground_kills.points, 0) + IFNULL(sea_kills.points, 0) points
            FROM {$planesTable}
            INNER JOIN (
                SELECT plane_id, pilot_id
                FROM {$sortiesTable}
                WHERE pilot_id = {$pilot->getId()} and server_id = {$server->getId()}
                group by plane_id
            ) as pilot_flights ON pilot_flights.plane_id = {$planesTable}.id
            LEFT JOIN {$pilotsTable} ON {$pilotsTable}.id = pilot_flights.pilot_id
            LEFT JOIN (
                SELECT COUNT(id) battles, pilot_plane_id
                FROM {$dogfightsTable}
                WHERE pilot_id = {$pilot->getId()} AND server_id = {$server->getId()} AND ai_id IS NOT NULL
                GROUP BY pilot_plane_id
            ) ai_kills ON ai_kills.pilot_plane_id = {$planesTable}.id
            LEFT JOIN (
                SELECT COUNT(id) destroyed, SUM(points) points, plane_id
                FROM {$killsTable}
                WHERE pilot_id = {$pilot->getId()} AND server_id = {$server->getId()}
                AND ground_kill = 1
                GROUP BY plane_id
            ) ground_kills ON ground_kills.plane_id = {$planesTable}.id
            LEFT JOIN (
                SELECT COUNT(id) destroyed, SUM(points) points, plane_id
                FROM {$killsTable}
                WHERE pilot_id = {$pilot->getId()} AND server_id = {$server->getId()}
                AND sea_kill = 1
                GROUP BY plane_id
            ) sea_kills ON sea_kills.plane_id = {$planesTable}.id
            ORDER BY plane ASC
        ";

        $result = [];
        foreach ($em->getConnection()->executeQuery($sql)->fetchAllAssociative() as $row) {
            $row['id'] = (int)$row['id'];
            $row['aiKilled'] = (int)$row['aiKilled'];
            $row['groundKills'] = (int)$row['groundKills'];
            $row['seaKills'] = (int)$row['seaKills'];
            $row['points'] = (int)$row['points'];

            $result[] = $row;
        }
        return $result;
    }

    public function getFlightDataByPlanes($pilot, $server)
    {
        $em = $this->getEntityManager();

        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $planesTable = $em->getClassMetadata(Plane::class)->getTableName();

        $sql = "
            SELECT
                {$planesTable}.id id,
                {$planesTable}.name plane,
                IFNULL(pilot_deaths.died, 0) died,
                IFNULL(pilot_flights.sorties, 0) sorties,
                IFNULL(pilot_flights.total_time, 0) totalTime,
                IFNULL(flight_data.landings, 0) landings
            FROM {$planesTable}
            INNER JOIN (
                SELECT plane_id, pilot_id, COUNT(pilot_id) sorties, SUM(total_time) total_time
                FROM {$sortiesTable}
                WHERE pilot_id = {$pilot->getId()} and server_id = {$server->getId()}
                group by plane_id
            ) AS pilot_flights ON pilot_flights.plane_id = {$planesTable}.id
            LEFT JOIN {$pilotsTable} ON {$pilotsTable}.id = pilot_flights.pilot_id
            LEFT JOIN (
                SELECT COUNT(id) landings, plane_id
                FROM {$sortiesTable}
                WHERE pilot_id = {$pilot->getId()} AND server_id = {$server->getId()} AND landing_airfield_id IS NOT NULL
                GROUP BY plane_id
            ) flight_data ON flight_data.plane_id = {$planesTable}.id
            LEFT JOIN (
                SELECT COUNT(plane_id) died, plane_id
                FROM {$eventsTable}
                WHERE pilot_id = {$pilot->getId()} and event = 'DEATH' and server_id = {$server->getId()}
                GROUP BY plane_id
            ) AS pilot_deaths ON pilot_deaths.plane_id = {$planesTable}.id
            ORDER BY plane ASC
        ";

        $result = [];
        foreach ($em->getConnection()->executeQuery($sql)->fetchAllAssociative() as $row) {
            $row['id'] = (int)$row['id'];
            $row['sorties'] = (int)$row['sorties'];
            $row['landings'] = (int)$row['landings'];
            $row['died'] = (int)$row['died'];
            $row['totalTime'] = Helper::calculateFlightTime(intval($row['totalTime']));

            $result[] = $row;
        }
        return $result;
    }

    /**
     * @param string $ucid
     * @return Pilot|null
     */
    public function getPilotByUcidPart(string $ucid) :?Pilot
    {
        try {
            return $this->createQueryBuilder('p')
                ->where('p.ucid LIKE :ucid')
                ->setParameter('ucid', '%'.$ucid)
                ->setMaxResults(1)
                ->getQuery()
                ->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }
}
