<?php

namespace App\Repository;

use App\Entity\Dogfight;
use App\Entity\Elo;
use App\Entity\Event;
use App\Entity\Kill;
use App\Entity\Mission;
use App\Entity\MissionRegistry;
use App\Entity\Pilot;
use App\Entity\Server;
use App\Entity\Sortie;
use App\Entity\Theatre;
use App\Entity\Tour;
use App\Helper\Helper;
use Doctrine\DBAL\DBALException;
use Monolog\Logger;

/**
 * MissionRegistryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MissionRegistryRepository extends BaseRepository
{
    public const RED = 'RED';
    public const BLUE = 'BLUE';
    public const DRAW = 'DRAW';

    /**
     * Returns object of mission registry information
     * @param Server|null $server
     * @return MissionRegistry|null
     */
    public function getLastMissionRegistry(Server $server = null): ?MissionRegistry
    {
        if (empty($server)) {
            return null;
        }
        /** @var MissionRegistry $registry */
        $registry = $this
            ->findOneBy(['finished' => false, 'server' => $server], ['id' => 'DESC']);

        return $registry;
    }

    public function getMissions(Server $server = null): array
    {
        if ($server === null) {
            return [];
        }

        $table = $this->getClassMetadata()->getTableName();
        $missionsTable = $this->getEntityManager()->getClassMetadata(Mission::class)->getTableName();
        $query = "
            SELECT 
                {$table}.*,
                {$missionsTable}.name
            FROM {$table}
            LEFT JOIN {$missionsTable} ON {$missionsTable}.id = {$table}.mission_id 
            WHERE {$table}.server_id = {$server->getId()} 
            ORDER BY {$table}.id DESC
        ";

        try {
            return $this->getEntityManager()->getConnection()->query($query)->fetchAll();
        } catch (DBALException $e) {
            $this->log($e->getMessage(), Logger::ERROR, 'repository');
            return [];
        }
    }

    public function getPlayedMissionsForSides(Server $server, Tour $tour = null)
    {
        $table = $this->getClassMetadata()->getTableName();
        $sql = "
            SELECT
                COUNT(id) played, winner
            FROM {$table}
            WHERE server_id={$server->getId()}
        ";
        if (!empty($tour)) {
            $sql .= " AND {$table}.tour_id={$tour->getId()}";
        }

        $sql .= " GROUP BY winner";
        $response = [];
        $result = $this->getEntityManager()->getConnection()->query($sql)->fetchAll();
        foreach ($result as $item) {
            $response[$item['winner']] = (int)$item['played'];
        }
        $response['RED'] = $response['RED'] ?? 0;
        $response['BLUE'] = $response['BLUE'] ?? 0;
        $response['DRAW'] = $response['DRAW'] ?? 0;
        $response['total'] = $response['RED'] + $response['BLUE'] + $response['DRAW'];
        return $response;
    }

    public function getA2APVP(MissionRegistry $registry)
    {
        $em = $this->getEntityManager();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $query = "
            SELECT 
               {$pilotsTable}.id,
               {$pilotsTable}.username callsign,
               COUNT({$dogfightsTable}.victim_id) as killed,
               SUM({$dogfightsTable}.points) points
            FROM `{$dogfightsTable}`
            LEFT JOIN {$pilotsTable} ON {$pilotsTable}.id={$dogfightsTable}.pilot_id
            WHERE {$dogfightsTable}.`mission_registry_id` = {$registry->getId()} AND {$dogfightsTable}.victim_id != ''
            GROUP BY {$dogfightsTable}.pilot_id
            ORDER BY killed DESC    
        ";

        return $this->getEntityManager()->getConnection()->query($query)->fetchAll();
    }

    public function getA2APVE(MissionRegistry $registry)
    {
        $em = $this->getEntityManager();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $query = "
            SELECT 
                {$pilotsTable}.id,
                {$pilotsTable}.username callsign,
                COUNT({$dogfightsTable}.ai_id) as killed,
                SUM({$dogfightsTable}.points) points
            FROM `{$dogfightsTable}`
            LEFT JOIN {$pilotsTable} ON {$pilotsTable}.id={$dogfightsTable}.pilot_id
            WHERE {$dogfightsTable}.`mission_registry_id`={$registry->getId()} AND {$dogfightsTable}.ai_id != ''
            GROUP BY {$dogfightsTable}.pilot_id
            ORDER BY killed DESC
        ";

        return $this->getEntityManager()->getConnection()->query($query)->fetchAll();
    }

    public function getA2GPVE(MissionRegistry $registry)
    {
        $em = $this->getEntityManager();
        $killsTable = $em->getClassMetadata(Kill::class)->getTableName();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $query = "
            SELECT 
                {$pilotsTable}.id, 
                {$pilotsTable}.username callsign, 
                COUNT({$killsTable}.unit_id) destroyed,
                SUM({$killsTable}.points) points
            FROM `{$killsTable}`
            LEFT JOIN {$pilotsTable} ON {$pilotsTable}.id={$killsTable}.pilot_id
            WHERE {$killsTable}.`mission_registry_id`={$registry->getId()}
            GROUP BY {$killsTable}.pilot_id
            ORDER BY destroyed DESC
        ";

        return $this->getEntityManager()->getConnection()->executeQuery($query)->fetchAllAssociative();
    }

    public function getList(Server $server, Tour $tour)
    {
        $em = $this->getEntityManager();
        $table = $this->getClassMetadata()->getTableName();
        $theatreTable = $em->getClassMetadata(Theatre::class)->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $killsTable = $em->getClassMetadata(Kill::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $missionsTable = $em->getClassMetadata(Mission::class)->getTableName();

        $sql = "
            SELECT 
            msn.id id,
            theatre.name theatre,
            {$missionsTable}.name name,
            msn.start_time startTime,
            msn.end_time endTime,
            IFNULL(TIMESTAMPDIFF(SECOND, msn.start_time, IFNULL(msn.end_time, NOW())), 0) AS duration,
            IFNULL(redDogfights.kills, 0) AS redDogfights,
            IFNULL(blueDogfights.kills, 0) AS blueDogfights,
            IFNULL(redKills.kills, 0) AS redKills,
            IFNULL(blueKills.kills, 0) AS blueKills,
            IFNULL(redKills.points, 0) AS redKillsPoints,
            IFNULL(blueKills.points, 0) AS blueKillsPoints,
            IFNULL(redSorties.sorties, 0) AS redSorties,
            IFNULL(blueSorties.sorties, 0) AS blueSorties,
            msn.finished AS finished,
            msn.winner
            FROM {$table} msn
            LEFT JOIN {$theatreTable} theatre ON theatre.id = msn.theatre_id 
            LEFT JOIN {$missionsTable} ON {$missionsTable}.id = msn.mission_id
            LEFT JOIN (
                SELECT COUNT(mission_registry_id) as kills, mission_registry_id
                FROM {$dogfightsTable} 
                WHERE server_id = {$server->getId()} AND tour_id = {$tour->getId()} AND pilot_side = 'RED'
                GROUP BY mission_registry_id
            ) as redDogfights ON redDogfights.mission_registry_id = msn.id
            LEFT JOIN (
                SELECT COUNT(mission_registry_id) as kills, mission_registry_id
                FROM {$dogfightsTable} 
                WHERE server_id = {$server->getId()} AND tour_id = {$tour->getId()} AND pilot_side = 'BLUE'
                GROUP BY mission_registry_id
            ) as blueDogfights ON blueDogfights.mission_registry_id = msn.id
            LEFT JOIN (
                SELECT COUNT(mission_registry_id) as kills, SUM(points) as points, mission_registry_id
                FROM {$killsTable} 
                WHERE server_id = {$server->getId()} AND tour_id = {$tour->getId()} AND side = 'RED'
                GROUP BY mission_registry_id
            ) as redKills ON redKills.mission_registry_id = msn.id
            LEFT JOIN (
                SELECT COUNT(mission_registry_id) as kills, SUM(points) as points, mission_registry_id
                FROM {$killsTable} 
                WHERE server_id = {$server->getId()} AND tour_id = {$tour->getId()} AND side = 'BLUE'
                GROUP BY mission_registry_id
            ) as blueKills ON blueKills.mission_registry_id = msn.id
            LEFT JOIN (
                SELECT COUNT(mission_registry_id) as sorties, mission_registry_id
                FROM {$sortiesTable} 
                WHERE server_id = {$server->getId()} AND tour_id = {$tour->getId()} AND side = 'RED'
                GROUP BY mission_registry_id
            ) as redSorties ON redSorties.mission_registry_id = msn.id
            LEFT JOIN (
                SELECT COUNT(mission_registry_id) as sorties, mission_registry_id
                FROM {$sortiesTable} 
                WHERE server_id = {$server->getId()} AND tour_id = {$tour->getId()} AND side = 'BLUE'
                GROUP BY mission_registry_id
            ) as blueSorties ON blueSorties.mission_registry_id = msn.id
            WHERE msn.tour_id = {$tour->getId()} AND msn.server_id = {$server->getId()}
            ORDER BY msn.start_time DESC
        ";

        $result = [];
        foreach ($em->getConnection()->executeQuery($sql)->fetchAllAssociative() as $row) {
            $row['redDogfights'] = (int)$row['redDogfights'];
            $row['blueDogfights'] = (int)$row['blueDogfights'];
            $row['redKills'] = (int)$row['redKills'];
            $row['blueKills'] = (int)$row['blueKills'];
            $row['redKillsPoints'] = (int)$row['redKillsPoints'];
            $row['blueKillsPoints'] = (int)$row['blueKillsPoints'];
            $row['redSorties'] = (int)$row['redSorties'];
            $row['blueSorties'] = (int)$row['blueSorties'];
            $row['finished'] = (bool)['finished'];
            $row['duration'] = Helper::calculateFlightTime($row['duration']);
            $result[] = $row;
        }
        return $result;
    }

    public function getRanking(MissionRegistry $missionRegistry)
    {
        $em = $this->getEntityManager();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $killsTable = $em->getClassMetadata(Kill::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $eloTable = $em->getClassMetadata(Elo::class)->getTableName();

        $death = Event::DEATH;
        $crash = Event::CRASH;
        $eject = Event::EJECT;
        $disconnect = Event::DISCONNECT;
        $landing = Event::LANDING;
        $eloType = EloRepository::ELO_TYPE_SIDE_GENERAL;

        $server = $missionRegistry->getServer();
        $sql = "
            SELECT
                {$pilotsTable}.id id,
                {$pilotsTable}.username callsign,
                {$pilotsTable}.country country,
                IFNULL(flight_data.flights, 0) flights,
                flight_data.flight_time flightTime,
                IFNULL(dogfights_wins.airwins, 0) + IFNULL(dogfights_loses.airloses, 0) airBattles,    
                dogfights_wins.airwins airWins,
                dogfights_loses.airloses airLoses,
                IFNULL(landing_events.landed, 0) landed,
                IFNULL(crash_events.crashed, 0) crashed,
                IFNULL(eject_events.ejected, 0) ejected,
                IFNULL(disconnect_events.disconnected, 0) disconnected,
                IFNULL(red_elo.rating, 1000) AS redElo,
                IFNULL(blue_elo.rating, 1000) AS blueElo
            FROM `{$pilotsTable}`
            INNER JOIN (
                SELECT pilot_id, COUNT(id) flights, SUM(total_time) flight_time
                FROM {$sortiesTable}
                WHERE server_id={$missionRegistry->getServer()->getId()} AND mission_registry_id={$missionRegistry->getId()}
                GROUP BY pilot_id
            ) flight_data ON flight_data.pilot_id = {$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, COUNT(pilot_id) AS airwins 
                FROM {$dogfightsTable}
                WHERE server_id={$server->getId()} AND mission_registry_id = {$missionRegistry->getId()}
                AND in_air IS NOT NULL AND is_pvp = 1 AND friendly = 0
                GROUP BY pilot_id
            ) AS dogfights_wins ON dogfights_wins.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT victim_id pilot_id, COUNT(victim_id) AS airloses 
                FROM {$dogfightsTable}
                WHERE server_id={$server->getId()} AND mission_registry_id = {$missionRegistry->getId()}
                AND in_air IS NOT NULL AND is_pvp = 1 AND friendly = 0
                GROUP BY victim_id
            ) AS dogfights_loses ON dogfights_loses.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, COUNT(pilot_id) AS crashed 
                FROM {$eventsTable}
                WHERE server_id={$server->getId()} AND mission_registry_id = {$missionRegistry->getId()} AND event = '{$crash}'
                GROUP BY pilot_id
            )AS crash_events ON crash_events.pilot_id = {$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, COUNT(pilot_id) AS ejected 
                FROM {$eventsTable}
                WHERE server_id={$server->getId()} AND mission_registry_id = {$missionRegistry->getId()} AND event = '{$eject}'
                GROUP BY pilot_id
            )AS eject_events ON eject_events.pilot_id = {$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, COUNT(pilot_id) AS disconnected 
                FROM {$eventsTable}
                WHERE server_id={$server->getId()} AND mission_registry_id = {$missionRegistry->getId()} AND event = '{$disconnect}'
                GROUP BY pilot_id
            )AS disconnect_events ON eject_events.pilot_id = {$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, COUNT(pilot_id) AS landed 
                FROM {$eventsTable}
                WHERE server_id={$server->getId()} AND mission_registry_id = {$missionRegistry->getId()} AND event = '{$landing}'
                GROUP BY pilot_id
            )AS landing_events ON landing_events.pilot_id = {$pilotsTable}.id
            LEFT JOIN {$eloTable} red_elo ON red_elo.side = 'RED' 
                AND red_elo.`type` = '{$eloType}' 
                AND red_elo.server_id={$server->getId()} 
                AND red_elo.tour_id IS NULL 
                AND red_elo.pilot_id={$pilotsTable}.id
            LEFT JOIN {$eloTable} blue_elo ON blue_elo.side = 'BLUE' 
                AND blue_elo.`type` = '{$eloType}' 
                AND blue_elo.server_id={$server->getId()} 
                AND blue_elo.tour_id IS NULL 
                AND blue_elo.pilot_id={$pilotsTable}.id
            ORDER BY redElo DESC, blueElo DESC
        ";

        $result = [];
        foreach ($em->getConnection()->executeQuery($sql)->fetchAllAssociative() as $row) {
            $row['id'] = intval($row['id']);
            $row['flights'] = intval($row['flights']);
            $row['flightTime'] = Helper::calculateFlightTime(intval($row['flightTime']));
            $row['airBattles'] = intval($row['airBattles']);
            $row['airWins'] = intval($row['airWins']);
            $row['airLoses'] = intval($row['airLoses']);
            $row['crashed'] = intval($row['crashed']);
            $row['ejected'] = intval($row['ejected']);
            $row['disconnected'] = intval($row['disconnected']);
            $row['landed'] = intval($row['landed']);
            $row['redElo'] = intval($row['redElo']);
            $row['blueElo'] = intval($row['blueElo']);
            $result[] = $row;
        }
        return $result;
    }
}
