<?php

namespace App\Repository;

use App\Entity\BestStreak;
use App\Entity\CurrentKill;
use App\Entity\Dogfight;
use App\Entity\Event;
use App\Entity\Kill;
use App\Entity\MissionRegistry;
use App\Entity\Online;
use App\Entity\Pilot;
use App\Entity\Plane;
use App\Entity\Server;
use App\Entity\Sortie;
use Doctrine\DBAL\DBALException;
use Exception;
use Monolog\Logger;
use PDO;

/**
 * OnlineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OnlineRepository extends BaseRepository
{
    public const RED = 'RED';
    public const BLUE = 'BLUE';
    public const SPECTATOR = 'SPECTATOR';

    public function save(Online $online) : bool
    {
        $em = $this->getEntityManager();
        $plane = $online->getPlane() !== null ? $online->getPlane()->getId() : 'NULL';
        $time = $online->getEnterTime()->format('Y-m-d H:i:s');
        $onlineTable = $em->getClassMetadata(Online::class)->getTableName();
        $values = "({$online->getServer()->getId()}, {$online->getPilot()->getId()}, {$plane}, '{$online->getSide()}', '{$time}')";
        $updateFields = 'server_id=VALUES(server_id), pilot_id=VALUES(pilot_id), plane_id=VALUES(plane_id), side=VALUES(side), enter_time=VALUES(enter_time)';
        $query = "INSERT INTO `{$onlineTable}`(server_id, pilot_id, plane_id, side, enter_time) VALUES {$values} ON DUPLICATE KEY UPDATE {$updateFields};";
        $this->log('Running query: '.$query, Logger::INFO, 'repository');
        try {
            $em->getConnection()->prepare($query)->execute();
            return true;
        } catch (Exception $e) {
            $this->log($e->getMessage(), Logger::CRITICAL, 'repository');
            return false;
        }
    }

    /**
     * @param Server $server
     * @return array
     */
    public function getPilotsForServer(Server $server): array
    {
        return $this->findBy(array(
            'server' => $server,
        ));
    }

    /**
     * @return int|mixed|string
     */
    public function getOnline()
    {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder();
        $qb->select('online')->from(Online::class, 'online');
        $qb->where($qb->expr()->andx(
            $qb->expr()->isNotNull('online.pilot')
        ));

        return $qb->getQuery()->getResult();
    }

    public function getPilotsOnlineInfo(Server $server, MissionRegistry $registry = null): array
    {
        if ($registry === null) {
            return [];
        }
        $em = $this->getEntityManager();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $onlineTable = $em->getClassMetadata(Online::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $planesTable = $em->getClassMetadata(Plane::class)->getTableName();
        $bestStreaksTable = $em->getClassMetadata(BestStreak::class)->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $currentKills = $em->getClassMetadata(CurrentKill::class)->getTableName();
        $diedEvent = Event::DEATH;
        $bestStreakType = StreakRepository::TYPE_AIR;
        $sql = "
            SELECT
            {$pilotsTable}.id AS id,
            {$pilotsTable}.ucid AS ucid,
            {$pilotsTable}.username AS callsign,
            {$onlineTable}.side AS side,
            {$onlineTable}.frequencies AS frequencies,
            {$pilotsTable}.is_active AS active,
            {$pilotsTable}.online AS online,
            {$pilotsTable}.checked AS checked,
            {$pilotsTable}.avatar AS avatar,
            {$pilotsTable}.country AS country,
            {$planesTable}.name AS plane,
            {$planesTable}.image AS image,
            {$planesTable}.red_image AS redImage,
            {$planesTable}.blue_image AS blueImage,
            {$planesTable}.id AS plane_id,
            IFNULL(dies.died, 0) AS died,
            IFNULL({$bestStreaksTable}.streak, 0) AS beststreak,
            IFNULL(airkills.airkills, 0) AS airkills,
            IFNULL(groundkills.destroyed, 0) AS destroyed,
            FORMAT(IFNULL(airkills.airkills, 0) / IFNULL(dies.died, 1), 2) AS kd,
            flights.total_time AS total_time
            FROM `{$onlineTable}`
            LEFT JOIN {$pilotsTable} ON {$pilotsTable}.id={$onlineTable}.pilot_id
            LEFT JOIN {$planesTable} ON {$planesTable}.id={$onlineTable}.plane_id
            LEFT JOIN {$bestStreaksTable} ON {$bestStreaksTable}.pilot_id={$pilotsTable}.id
                AND streak_type='{$bestStreakType}' AND {$bestStreaksTable}.server_id={$server->getId()}
            LEFT JOIN (
                SELECT SUM(total_time) AS total_time, pilot_id
                FROM {$sortiesTable}
                WHERE server_id={$server->getId()}
                GROUP BY pilot_id
            ) AS flights ON flights.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS airkills, pilot_id
                FROM {$currentKills}
                WHERE server_id={$server->getId()} AND (victim_id != '' OR is_ai = 1) AND mission_registry_id = {$registry->getId()}
                GROUP BY pilot_id
            ) AS airkills ON airkills.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS destroyed, pilot_id
                FROM {$currentKills}
                WHERE server_id={$server->getId()} AND (unit_id != '' AND is_ai = 0) AND mission_registry_id = {$registry->getId()}
                GROUP BY pilot_id
            ) AS groundkills ON groundkills.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS died, pilot_id
                FROM {$eventsTable}
                WHERE server_id={$server->getId()} AND event='{$diedEvent}' AND mission_registry_id={$registry->getId()}
                GROUP BY pilot_id
            ) AS dies ON dies.pilot_id={$pilotsTable}.id
            WHERE {$onlineTable}.server_id={$server->getId()}
            ORDER BY {$onlineTable}.side ASC
        ";
        try{
            $search = $em->getConnection()->query($sql)->fetchAll();
            $result = [];

            foreach ($search as $row) {
                if (!empty($row['frequencies'])) {
                    $row['frequencies'] = json_decode($row['frequencies'], true);
                }
                $result[] = $row;
            }

            return $result;
        }catch (DBALException $e) {
            return [];
        }

    }

    public function getPilotOnlineInfo(Pilot $pilot) {
        $em = $this->getEntityManager();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $onlineTable = $em->getClassMetadata(Online::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $planesTable = $em->getClassMetadata(Plane::class)->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $groundKillsTable = $em->getClassMetadata(Kill::class)->getTableName();
        $bestStreaksTable = $em->getClassMetadata(BestStreak::class)->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $diedEvent = Event::DEATH;
        $sql = "
            SELECT
            {$onlineTable}.side AS side,
            {$onlineTable}.frequencies AS frequencies,
            {$pilotsTable}.username AS callsign,
            {$pilotsTable}.id AS id,
            {$pilotsTable}.online AS online,
            {$pilotsTable}.checked AS checked,
            {$pilotsTable}.ucid AS ucid,
            {$pilotsTable}.country AS country,
            {$planesTable}.name AS plane,
            {$planesTable}.image AS image,
            {$planesTable}.red_image AS redImage,
            {$planesTable}.blue_image AS blueImage,
            {$planesTable}.id AS plane_id,
            IFNULL(dies.died, 0) AS died,
            IFNULL({$bestStreaksTable}.streak, 0) AS beststreak,
            IFNULL(airkills.airkills, 0) AS airkills,
            IFNULL(groundkills.destroyed, 0) AS destroyed,
            IFNULL(airkills.airkills, 0) / IFNULL(dies.died, 1) AS kd,
            sorties.total_time AS total_time
            FROM `{$onlineTable}`
            LEFT JOIN (
                SELECT SUM(total_time) AS total_time, pilot_id
                FROM {$sortiesTable}
                WHERE pilot_id={$pilot->getId()}
                GROUP BY pilot_id
            ) AS sorties ON sorties.pilot_id={$onlineTable}.pilot_id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS airkills, pilot_id
                FROM {$dogfightsTable}
                WHERE pilot_id={$pilot->getId()}
                GROUP BY pilot_id
            ) AS airkills ON airkills.pilot_id={$onlineTable}.pilot_id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS destroyed, pilot_id
                FROM {$groundKillsTable}
                WHERE pilot_id={$pilot->getId()}
                GROUP BY pilot_id
            ) AS groundkills ON groundkills.pilot_id={$onlineTable}.pilot_id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS died, pilot_id
                FROM {$eventsTable}
                WHERE pilot_id={$pilot->getId()} AND event='{$diedEvent}'
                GROUP BY pilot_id
            ) AS dies ON dies.pilot_id={$onlineTable}.pilot_id
            LEFT JOIN {$bestStreaksTable} ON {$bestStreaksTable}.pilot_id={$onlineTable}.pilot_id
            LEFT JOIN {$pilotsTable} ON {$pilotsTable}.id={$onlineTable}.pilot_id
            LEFT JOIN {$planesTable} ON {$planesTable}.id={$onlineTable}.plane_id
            WHERE {$onlineTable}.pilot_id={$pilot->getId()}
            LIMIT 1
        ";
        try{
            $row = $em->getConnection()->query($sql)->fetch(PDO::FETCH_ASSOC);

            if($row && !empty($row) && !empty($row['frequencies'])) {
                $row['frequencies'] = json_decode($row['frequencies'], true);
            }
            return $row;
        }catch (DBALException $e) {
            return [];
        }

    }

    /**
     * @param Pilot $pilot
     * @return bool
     */
    public function clearOnline(Pilot $pilot) : bool
    {
        try {
            $this->getEntityManager()->createQuery('DELETE FROM App:Online online WHERE online.pilot = :pilot')
                ->setParameter('pilot', $pilot)->execute();

            return true;
        } catch (Exception $e) {
            $this->log($e->getMessage() . "File: {$e->getFile()}, line: {$e->getLine()}", Logger::ALERT);
            return false;
        }
    }

    public function getPilotOnlineData(Server $server, MissionRegistry $registry, Pilot $pilot) : array
    {
        $em = $this->getEntityManager();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $onlineTable = $em->getClassMetadata(Online::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $planesTable = $em->getClassMetadata(Plane::class)->getTableName();
        $dogfightsTable = $em->getClassMetadata(Dogfight::class)->getTableName();
        $groundKillsTable = $em->getClassMetadata(Kill::class)->getTableName();
        $bestStreaksTable = $em->getClassMetadata(BestStreak::class)->getTableName();
        $eventsTable = $em->getClassMetadata(Event::class)->getTableName();
        $diedEvent = Event::DEATH;
        $sql = "
            SELECT
            {$onlineTable}.side AS side,
            {$onlineTable}.frequencies AS frequencies,
            {$pilotsTable}.username AS callsign,
            {$pilotsTable}.id AS id,
            {$pilotsTable}.ucid AS ucid,
            {$pilotsTable}.is_active AS active,
            {$pilotsTable}.checked AS checked,
            {$pilotsTable}.avatar AS avatar,
            {$pilotsTable}.country AS country,
            {$planesTable}.name AS plane,
            {$planesTable}.image AS image,
            {$planesTable}.red_image AS redImage,
            {$planesTable}.blue_image AS blueImage,
            {$planesTable}.id AS plane_id,
            IFNULL(dies.died, 0) AS died,
            IFNULL({$bestStreaksTable}.streak, 0) AS beststreak,
            IFNULL(airkills.airkills, 0) AS airkills,
            IFNULL(groundkills.destroyed, 0) AS destroyed,
            IFNULL(airkills.airkills, 0) / IFNULL(dies.died, 1) AS kd,
            sorties.total_time AS total_time
            FROM `{$onlineTable}`
            LEFT JOIN (
                SELECT SUM(total_time) AS total_time, pilot_id
                FROM {$sortiesTable}
                WHERE server_id={$server->getId()}
                GROUP BY pilot_id
            ) AS sorties ON sorties.pilot_id={$onlineTable}.pilot_id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS airkills, pilot_id
                FROM {$dogfightsTable}
                WHERE server_id={$server->getId()} AND mission_registry_id={$registry->getId()}
                GROUP BY pilot_id
            ) AS airkills ON airkills.pilot_id={$onlineTable}.pilot_id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS destroyed, pilot_id
                FROM {$groundKillsTable}
                WHERE server_id={$server->getId()} AND mission_registry_id={$registry->getId()}
                GROUP BY pilot_id
            ) AS groundkills ON groundkills.pilot_id={$onlineTable}.pilot_id
            LEFT JOIN (
                SELECT COUNT(pilot_id) AS died, pilot_id
                FROM {$eventsTable}
                WHERE server_id={$server->getId()} AND mission_registry_id={$registry->getId()} AND event='{$diedEvent}'
                GROUP BY pilot_id
            ) AS dies ON dies.pilot_id={$onlineTable}.pilot_id
            LEFT JOIN {$bestStreaksTable} ON {$bestStreaksTable}.pilot_id={$onlineTable}.pilot_id
            LEFT JOIN {$pilotsTable} ON {$pilotsTable}.id={$onlineTable}.pilot_id
            LEFT JOIN {$planesTable} ON {$planesTable}.id={$onlineTable}.plane_id
            WHERE {$onlineTable}.server_id={$server->getId()} AND {$pilotsTable}.id = {$pilot->getId()}
            ORDER BY {$onlineTable}.side ASC
            LIMIT 1
        ";
        try{
            $search = $em->getConnection()->query($sql)->fetchAll();
            $data = [];
            if (!empty($search)) {
                $data = reset($search);
                $data['frequencies'] = json_decode($data['frequencies'], true);
            }
            return $data;
        }catch (DBALException $e) {
            return [];
        }

    }
}
