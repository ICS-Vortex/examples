<?php

namespace App\Repository;

use App\Entity\ArticleTag;
use App\Entity\Server;
use Doctrine\DBAL\Driver\Exception;
use Doctrine\ORM\EntityRepository;

/**
 * DcsNewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    const PER_PAGE = 1;

    /**
     * @param Server|null $server
     * @param array $options
     * @return int|mixed
     * @throws Exception
     */
    public function getArticlesCount(Server $server = null, $options = []): int
    {
        $sql = "
            SELECT IFNULL(COUNT(articles.id), 0) as articles 
            FROM {$this->getClassMetadata()->getTableName()}
        ";

        $sql .= " WHERE 1";

        if (!empty($server)) {
            $sql.= " AND server_id={$server->getId()}";
        }

        if (isset($options['tag']) && !empty($options['tag'])){
            $tag = (int) $options['tag'];
            $sql .= " AND tag_id = {$tag}";
        }

        if (isset($options['s'])) {
            $sql .= " AND (articles.title LIKE '%{$options['s']}%' OR articles.title_en LIKE '%{$options['s']}%')";
        }
        try {
            $result = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAssociative();
            return $result['articles'];
        } catch (\Exception $e) {
            return 0;
        }
    }

    /**
     * @param int $limit
     * @param int $offset
     * @param Server|null $server
     * @param array $options
     * @return int|mixed|string
     */
    public function getArticles(int $limit, int $offset, Server $server = null, $options = [])
    {
        $qb = $this->createQueryBuilder('a');
        if (!empty($server)) {
            $qb->andWhere('a.server = :server')->setParameter('server', $server);
        }

        if (isset($options['s']) && !empty($options['s']) && strlen($options['s']) > 1) {
            $qb->where($qb->expr()->orX(
                $qb->expr()->like('a.title', ':search'),
                $qb->expr()->like('a.titleEn', ':search'),
                $qb->expr()->like('a.description', ':search'),
                $qb->expr()->like('a.descriptionEn', ':search'),
            ));
            $qb->setParameter('search', '%'. $options['s'] .'%');
        }

        if (isset($options['tag']) && !empty($options['tag'])) {
            $tag = $this->getEntityManager()->getRepository(ArticleTag::class)->findOneBy([
                'id' => $options['tag']
            ]);
            if (!empty($tag)) {
                $qb->andWhere('a.tag = :tag')->setParameter('tag', $tag);
            }
        }
        $qb->orderBy('a.createdAt', 'DESC');
        $qb->setFirstResult($offset);
        $qb->setMaxResults($limit);

        return $qb->getQuery()->getResult();

    }


    /**
     * @param int $limit
     * @return array|null
     */
    public function getLatestNews(int $limit): ?array
    {
        $query = $this->createQueryBuilder('a')
            ->where('a.server IS NULL')
            ->andWhere('a.public = :public')->setParameter('public', true)
            ->orderBy('a.createdAt', 'DESC')
            ->setMaxResults($limit)
            ->getQuery();
        return $query->getResult();
    }
}
