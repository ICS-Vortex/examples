<?php

namespace App\Repository;

use App\Entity\BestStreak;
use App\Entity\CurrentKill;
use App\Entity\Dogfight;
use App\Entity\Elo;
use App\Entity\Event;
use App\Entity\FavorPlanes;
use App\Entity\Flight;
use App\Entity\Kill;
use App\Entity\MapUnit;
use App\Entity\Mission;
use App\Entity\MissionRegistry;
use App\Entity\Model\Server as ServerModel;
use App\Entity\Online;
use App\Entity\Pilot;
use App\Entity\Server;
use App\Entity\Sortie;
use App\Entity\Streak;
use App\Entity\Tour;
use App\Entity\Unit;
use App\Entity\UnitType;
use App\Entity\Visitor;
use App\Helper\Helper;
use Doctrine\DBAL\DBALException;
use Doctrine\DBAL\Exception;
use Monolog\Logger;

/**
 * ServerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServerRepository extends BaseRepository
{
    public function getServers(): array
    {
        $table = $this->getClassMetadata()->getTableName();
        $onlineTable = $this->getEntityManager()->getClassMetadata(Online::class)->getTableName();
        $missionTable = $this->getEntityManager()->getClassMetadata(Mission::class)->getTableName();
        $query = "
            SELECT
            {$table}.id,
            online.online online,
            {$missionTable}.name mission,
            {$table}.`name`,
            {$table}.image,
            {$table}.background_image backgroundImage,
            {$table}.description,
            {$table}.description_en,
            {$table}.address,port,
            {$table}.active,
            {$table}.version,
            {$table}.is_online isOnline
            FROM {$table}
            LEFT JOIN {$missionTable} ON {$missionTable}.server_id={$table}.id AND {$missionTable}.id={$table}.mission_id
            LEFT JOIN (
                SELECT COUNT(id) online, server_id
                FROM {$onlineTable}
                GROUP BY server_id
            ) online ON online.server_id={$table}.id
            WHERE {$table}.active = 1
            ORDER BY {$table}.order_position ASC
        ";
        $response = [];
        $result = $this->getEntityManager()->getConnection()->executeQuery($query)->fetchAllAssociative();
        foreach ($result as $row) {
            $row['active'] = $row['active'] === '1';
            $row['isOnline'] = (bool)$row['isOnline'];
            if (empty($row['online'])) {
                $row['online'] = 0;
            }
            $response[] = $row;
        }
        return $response;
    }

    public function clearStatistics(Server $server) : bool
    {
        $em = $this->getEntityManager();
        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(Event::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(BestStreak::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());
        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(Streak::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(CurrentKill::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(Elo::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(Dogfight::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());
        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(FavorPlanes::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(Flight::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(MapUnit::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(Sortie::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(Kill::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(CurrentKill::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(Online::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(Visitor::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $em->getConnection()->executeQuery('DELETE FROM ' . $em->getRepository(MissionRegistry::class)
                ->getClassMetadata()->getTableName() . ' WHERE server_id = ' . $server->getId());

        $server->setIsOnline(false);
        $server->setMission(null);
        $em->persist($server);
        $em->flush();
        return true;
    }

    public function clearTemporaryData(Server $server) : bool
    {
        $em = $this->getEntityManager();
        $em->createQuery('DELETE FROM App:Online online WHERE online.server = :server')
            ->setParameter('server', $server)
            ->execute();
        $em->createQuery('DELETE FROM App:CurrentKill kills WHERE kills.server = :server')
            ->setParameter('server', $server)
            ->execute();
        $em->createQuery('DELETE FROM App:Flight flight WHERE flight.server = :server')
            ->setParameter('server', $server)
            ->execute();
        $em->createQuery('DELETE FROM App:MapUnit unit WHERE unit.server = :server')
            ->setParameter('server', $server)
            ->execute();
        return true;
    }

    /**
     * @param ServerModel $serverModel
     * @return Server|null
     */
    public function getServer(ServerModel $serverModel) : ?Server
    {
        /** @var $server Server */
        $server = $this->findOneBy(array(
            'identifier' => $serverModel->getIdentifier(),
        ));

        if($server === null){
            return null;
        }

        return $server;
    }

    public function updateLastActivity(Server $server) : bool
    {
        $em = $this->getEntityManager();
        $now = (new \DateTime())->format('Y-m-d H:i:s');
        $table = $this->getClassMetadata()->getTableName();

        $sql = "UPDATE {$table} SET is_online = 1, last_activity = '{$now}' WHERE id={$server->getId()}";

        try {
            $em->getConnection()->executeQuery($sql);
            return true;
        } catch (DBALException $e) {
            $this->log($e->getMessage(), Logger::CRITICAL, LogRepository::INITIATOR_REPOSITORY);
            return false;
        }
    }

    public function getPopularServers() : array
    {
        $em = $this->getEntityManager();
        $visitsTable = $em->getClassMetadata(Visitor::class)->getTableName();
        $serversTable = $em->getClassMetadata(Server::class)->getTableName();
        $sql = "
            SELECT
                {$serversTable}.id as id,
                {$serversTable}.name name,
                {$serversTable}.image image,
                {$serversTable}.is_online online,
                COUNT({$visitsTable}.pilot_id) visits
            FROM `{$visitsTable}`
            LEFT JOIN {$serversTable} ON {$serversTable}.id={$visitsTable}.server_id
            GROUP BY {$visitsTable}.server_id
            ORDER BY visits DESC
            LIMIT 5
        ";

        try {
            $this->log('Executing query: '.$sql, Logger::INFO, 'repository');
            return $em->getConnection()->executeQuery($sql)->fetchAllAssociative();
        } catch (DBALException $e) {
            $this->log($e->getMessage(), Logger::ERROR, 'repository');
            return [];
        }
    }

    /**
     * @param Server $server
     * @param Tour $tour
     * @return array
     * @throws Exception
     * @throws \Doctrine\DBAL\Driver\Exception
     */
    public function getPvePilotsRanking(Server $server, Tour $tour): array
    {
        $em = $this->getEntityManager();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $sortiesTable = $this->getEntityManager()->getClassMetadata(Sortie::class)->getTableName();
        $killsTable = $this->getEntityManager()->getClassMetadata(Kill::class)->getTableName();
        $unitsTable = $this->getEntityManager()->getClassMetadata(Unit::class)->getTableName();
        $unitsCategoryTable = $this->getEntityManager()->getClassMetadata(UnitType::class)->getTableName();
        $eventsTable = $this->getEntityManager()->getClassMetadata(Event::class)->getTableName();
        $dogfightsTable = $this->getEntityManager()->getClassMetadata(Dogfight::class)->getTableName();
        $tourWhere = null;
        if (!empty($tour)) {
            $tourWhere = " AND tour_id = {$tour->getId()}";
        }
        $status = SortieRepository::STATUS_AIRFIELD;

        $sql = "
            SELECT
                {$pilotsTable}.id AS id,
                {$pilotsTable}.username AS callsign,
                {$pilotsTable}.country AS country,
                IFNULL(flight_hours.total, 0) AS flightTime,
                IFNULL(count_death.death, 0) AS died,
                IFNULL(ground_kills.kills, 0) AS groundKills,
                IFNULL(sea_kills.kills, 0) AS seaKills,
                IFNULL(ai_kills.kills, 0) AS aiKills,
                IFNULL(flight_hours.takeoffs, 0) AS takeoffs,
                IFNULL(landings.count_landings, 0) AS landings,
                IFNULL(redKills.score, 0) AS redPoints,
                IFNULL(blueKills.score, 0) as bluePoints,
                IF(IFNULL(redKills.score, 0) >= IFNULL(blueKills.score, 0), IFNULL(redKills.score, 0), IFNULL(blueKills.score, 0)) as bestPoints,
                IF(IFNULL(redKills.score, 0) >= IFNULL(blueKills.score, 0), 'RED', 'BLUE') as bestPointsParam
            FROM {$pilotsTable}
            INNER JOIN (
                SELECT pilot_id, SUM(total_time) AS total, COUNT(id) as takeoffs
                FROM {$sortiesTable}
                WHERE server_id={$server->getId()} and tour_id={$tour->getId()}
                GROUP BY pilot_id
            ) AS flight_hours ON flight_hours.pilot_id={$pilotsTable}.id
            LEFT JOIN(
                SELECT pilot_id, COUNT(unit_id) AS kills, SUM(points) as score
                FROM {$killsTable}
                WHERE server_id={$server->getId()} AND ground_kill = 1 and tour_id={$tour->getId()}
                GROUP BY pilot_id
            ) AS ground_kills ON ground_kills.pilot_id={$pilotsTable}.id
            LEFT JOIN(
                SELECT pilot_id, COUNT(unit_id) AS kills, SUM(points) as score
                FROM {$killsTable}
                WHERE server_id={$server->getId()} AND sea_kill = 1 and tour_id={$tour->getId()}
                GROUP BY pilot_id
            ) AS sea_kills ON sea_kills.pilot_id={$pilotsTable}.id
            LEFT JOIN (
                SELECT pilot_id, COUNT(id) AS kills, SUM(points) as score
                FROM {$dogfightsTable}
                WHERE server_id = {$server->getId()} and tour_id={$tour->getId()} and victim_id IS NULL AND friendly = 0
                GROUP BY pilot_id
            ) AS ai_kills ON ai_kills.pilot_id = {$pilotsTable}.id
            LEFT JOIN(
                SELECT pilot_id, event, COUNT(event) as death,server_id
                FROM  {$eventsTable}
                WHERE event = 'DEATH' AND server_id={$server->getId()} AND tour_id={$tour->getId()}
                GROUP BY pilot_id
               ) AS count_death ON count_death.pilot_id={$pilotsTable}.id AND count_death.server_id={$server->getId()}
            LEFT JOIN (
                SELECT pilot_id, COUNT(id) AS count_landings
                FROM  {$sortiesTable}
                WHERE status = '{$status}' AND landing_airfield_id IS NOT NULL AND server_id={$server->getId()} AND tour_id={$tour->getId()}
                GROUP BY pilot_id
            ) AS landings ON landings.pilot_id={$pilotsTable}.id
            LEFT JOIN(
                SELECT pilot_id, SUM(points) as score
                FROM {$killsTable}
                WHERE server_id={$server->getId()} AND side = 'RED' and tour_id={$tour->getId()}
                GROUP BY pilot_id
            ) AS redKills ON redKills.pilot_id={$pilotsTable}.id
            LEFT JOIN(
                SELECT pilot_id, SUM(points) as score
                FROM {$killsTable}
                WHERE server_id={$server->getId()} AND side = 'BLUE' and tour_id={$tour->getId()}
                GROUP BY pilot_id
            ) AS blueKills ON blueKills.pilot_id={$pilotsTable}.id
            WHERE flight_hours.total > 0
            HAVING groundKills > 0
            ORDER BY bestPoints DESC
            LIMIT 100
        ";

        $result = [];
        $search = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAllAssociative();
        foreach ($search as $row) {
            $row['id'] = (int)$row['id'];
            $row['died'] = (int)$row['died'];
            $row['flightTime'] = Helper::calculateFlightTime($row['flightTime']);
            $row['groundKills'] = (int)$row['groundKills'];
            $row['seaKills'] = (int)$row['seaKills'];
            $row['aiKills'] = (int)$row['aiKills'];
            $row['takeoffs'] = (int)$row['takeoffs'];
            $row['landings'] = (int)$row['landings'];
            $row['redPoints'] = (int)$row['redPoints'];
            $row['bluePoints'] = (int)$row['bluePoints'];
            $row['bestPoints'] = (int)$row['bestPoints'];
            $result[] = $row;
        }
        return $result;
    }
}
