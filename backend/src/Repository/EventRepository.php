<?php

namespace App\Repository;

use App\Entity\Event;
use App\Entity\MissionRegistry;
use App\Entity\Pilot;
use App\Entity\Plane;
use App\Entity\Server;
use App\Entity\Tour;
use DateTime;
use Doctrine\DBAL\DBALException;
use Doctrine\ORM\ORMException;
use Exception;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends BaseRepository
{
    public const EVENT_FLIGHT_GROUP = 'flight_group';
    public const EVENT_WEATHER = 'weather';
    public const EVENT_REGISTRATION = 'registration';
    public const EVENT_BANLIST = 'banlist';
    public const EVENT_CHAT = 'chat';
    public const EVENT_CLOSE_SESSIONS = 'close_sessions';
    public const EVENT_MISSION_START = 'start';
    public const EVENT_MISSION_STOP = 'stop';
    public const EVENT_ENTERED = 'enter';
    public const EVENT_LEFT = 'left';
    public const EVENT_JOINED = 'join';
    public const EVENT_TAKEOFF = 'takeoff';
    public const EVENT_LANDED = 'land';
    public const EVENT_CRASHED = 'crash';
    public const EVENT_EJECTED = 'eject';
    public const EVENT_DIED = 'dead';
    public const EVENT_KILLED = 'kill';
    public const EVENT_FRIENDLY_FIRE = 'friendfire';
    public const EVENT_SHOT = 'shot';
    public const EVENT_WON = 'won';
    public const EVENT_SRS = 'srs';
    public const EVENT_VERSION = 'version';
    public const EVENT_OBJECTS = 'objects';
    public const EVENT_RACE = 'race';
    public const EVENT_COUPON = 'coupon';
    public const EVENT_EMAIL = 'email';


    public const RED = 'RED';
    public const BLUE = 'BLUE';

    public static $allowedAlwaysEvents = [
        self::EVENT_MISSION_START,
        self::EVENT_WON,
        self::EVENT_REGISTRATION,
        self::EVENT_EMAIL,
        self::EVENT_VERSION,
        self::EVENT_OBJECTS,
        self::EVENT_MISSION_STOP,
        self::EVENT_CLOSE_SESSIONS,
    ];

    public static $events = [
        self::EVENT_MISSION_START,
        self::EVENT_MISSION_STOP,
        self::EVENT_ENTERED,
        self::EVENT_LEFT,
        self::EVENT_JOINED,
        self::EVENT_TAKEOFF,
        self::EVENT_LANDED,
        self::EVENT_CRASHED,
        self::EVENT_EJECTED,
        self::EVENT_DIED,
        self::EVENT_KILLED,
        self::EVENT_WON,
        self::EVENT_CHAT,
        self::EVENT_SHOT,
        self::EVENT_FRIENDLY_FIRE,
        self::EVENT_VERSION,
        self::EVENT_OBJECTS,
        self::EVENT_SRS,
        self::EVENT_BANLIST,
        self::EVENT_REGISTRATION,
        self::EVENT_WEATHER,
        self::EVENT_FLIGHT_GROUP,
        self::EVENT_RACE,
        self::EVENT_COUPON,
        self::EVENT_CLOSE_SESSIONS,
        self::EVENT_EMAIL,
    ];

    public function getPilotPlanes(Pilot $pilot): array
    {
        $em = $this->getEntityManager();
        $id = $pilot->getId();
        $sql = "
            SELECT
                COUNT(pilot_id) AS flights,
                dcs_planes.name AS plane_name
            FROM dcs_pilots_events
            LEFT JOIN dcs_planes ON dcs_planes.id = dcs_pilots_events.plane_id
            WHERE dcs_pilots_events.pilot_id = $id && dcs_pilots_events.event='TAKEOFF'
            GROUP BY plane_id
        ";
        $query = $em->getConnection()->query($sql);
        return $query->fetchAll();
    }


    /**
     * @param $eventTitle
     * @param $time
     * @param Server $server
     * @param Pilot $pilot
     * @param $side
     * @param Plane|null $plane
     * @param Tour $tour
     * @param MissionRegistry $missionRegistry
     * @return bool
     * @throws ORMException
     * @throws Exception
     */
    public function addEvent($eventTitle, $time, Server $server, Pilot $pilot, $side, Plane $plane = null, Tour $tour, MissionRegistry $missionRegistry): bool
    {
        $event = new Event();
        $event->setEventTime(new DateTime($time));
        $event->setPilot($pilot);
        $event->setPlane($plane);
        $event->setServer($server);
        $event->setTour($tour);
        $event->setRegisteredMission($missionRegistry);

        $event->setEvent($eventTitle);
        $event->setSide($side);

        $em = $this->getEntityManager();
        $em->persist($event);
        $em->flush();
        return true;
    }

    public function getTourDeaths(Server $server, Tour $tour = null)
    {
        $em = $this->getEntityManager();
        $table = $em->getClassMetadata(Event::class)->getTableName();
        $whereClause = null;
        $event = Event::DEATH;
        if (!empty($tour)) {
            $whereClause = "AND {$table}.tour_id={$tour->getId()}";
        }
        $sql = "
            SELECT
                IFNULL(COUNT({$table}.pilot_id), 0) AS deaths,
                {$table}.side as side
            FROM {$table}
            WHERE {$table}.event='{$event}' AND {$table}.server_id={$server->getId()} {$whereClause}
            GROUP BY {$table}.side
        ";
        $result = $em->getConnection()->query($sql)->fetchAll();
        $resultArray = array();
        foreach ($result as $item) {
            $resultArray[$item['side']] = (int)$item['deaths'];
        }

        if (!isset($resultArray[self::RED])) {
            $resultArray[self::RED] = 0;
        }

        if (!isset($resultArray[self::BLUE])) {
            $resultArray[self::BLUE] = 0;
        }

        return $resultArray;
    }

    /**
     * @param Pilot $pilot
     * @param Server|null $server
     * @param Tour|null $tour
     * @return int[]
     */
    public function getPilotEvents(Pilot $pilot, Server $server = null, Tour $tour = null)
    {
        $sql = "
            SELECT `event`, COUNT(id) AS counts FROM flight_events
            WHERE `pilot_id` = {$pilot->getId()}
        ";

        if (!empty($tour)) {
            $sql .= " AND tour_id={$tour->getId()}";
        }
        if (!empty($server)) {
            $sql .= " AND tour_id={$server->getId()}";
        }

        $sql .= " GROUP BY `event`";
        $entityManager = $this->getEntityManager();
        try {
            $result = $entityManager->getConnection()->query($sql)->fetchAll();
            if (empty($result)) {
                return [
                    Event::TAKEOFF => 0,
                    Event::LANDING => 0,
                    Event::CRASHLANDING => 0,
                    Event::CRASH => 0,
                    Event::DEATH => 0,
                    Event::EJECT => 0,
                    Event::DISCONNECT => 0,
                ];
            }

            return [
                Event::TAKEOFF => $this->filterEvents(Event::TAKEOFF, $result),
                Event::LANDING => $this->filterEvents(Event::LANDING, $result),
                Event::CRASHLANDING => $this->filterEvents(Event::CRASHLANDING, $result),
                Event::CRASH => $this->filterEvents(Event::CRASH, $result),
                Event::DEATH => $this->filterEvents(Event::DEATH, $result),
                Event::EJECT => $this->filterEvents(Event::EJECT, $result),
                Event::DISCONNECT => $this->filterEvents(Event::DISCONNECT, $result),
            ];
        } catch (DBALException $e) {
            return [
                Event::TAKEOFF => 0,
                Event::LANDING => 0,
                Event::CRASHLANDING => 0,
                Event::CRASH => 0,
                Event::DEATH => 0,
                Event::EJECT => 0,
                Event::DISCONNECT => 0,
            ];
        }
    }

    private function filterEvents($seekingEvent, $events)
    {
        foreach ($events as $event) {
            if ($event['event'] == $seekingEvent) {
                return $event['counts'];
            }
        }

        return 0;
    }
}
