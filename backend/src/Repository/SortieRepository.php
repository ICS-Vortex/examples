<?php

namespace App\Repository;

use App\Entity\Pilot;
use App\Entity\Plane;
use App\Entity\Server;
use App\Entity\Sortie;
use App\Entity\Tour;
use App\Helper\Helper;
use DateInterval;
use DatePeriod;
use DateTime;
use Doctrine\DBAL\DBALException;
use Doctrine\DBAL\Exception;

/**
 * SortieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SortieRepository extends BaseRepository
{
    public const STATUS_AIRFIELD = 'airfield';
    public const STATUS_FIELD = 'field';
    public const STATUS_EJECT = 'eject';
    public const STATUS_DEATH = 'death';
    public const STATUS_DISCONNECT = 'disconnect';
    public const STATUS_CRASH = 'crash';

    public const RED = 'RED';
    public const BLUE = 'BLUE';

    public function getPilotFavourPlane(Pilot $pilot, Server $server): ?string
    {
        $em = $this->getEntityManager();
        $sorties = $this->getClassMetadata()->getTableName();
        $planes = $em->getClassMetadata(Plane::class)->getTableName();
        $sql = "
            SELECT 
                {$planes}.name name,
                COUNT({$sorties}.id) flights
            FROM {$sorties} 
            LEFT JOIN {$planes} ON {$planes}.id={$sorties}.plane_id
            WHERE server_id={$server->getId()} AND pilot_id={$pilot->getId()}
            GROUP BY plane_id
            ORDER BY flights DESC
            LIMIT 1
        ";

        try {
            $result = $em->getConnection()->query($sql)->fetch(\PDO::FETCH_ASSOC);
            if (!empty($result)) {
                return $result['name'];
            }

            return null;
        } catch (DBALException $e) {
            return null;
        }
    }

    public function getTourSorties(Server $server, Tour $tour = null)
    {
        $em = $this->getEntityManager();
        $table = $em->getClassMetadata(Sortie::class)->getTableName();
        $whereClause = null;
        if (!empty($tour)) {
            $whereClause = "AND {$table}.tour_id={$tour->getId()}";
        }
        $sql = "
            SELECT
                IFNULL(COUNT({$table}.pilot_id), 0) AS flights,
                {$table}.side
            FROM `{$table}`
            WHERE {$table}.server_id={$server->getId()} {$whereClause}
            GROUP BY {$table}.side
        ";

        $result = $em->getConnection()->query($sql)->fetchAll();
        $returnArray = array();
        foreach ($result as $item) {
            $returnArray[$item['side']] = (int)$item['flights'];
        }
        if (!isset($returnArray[self::RED])) {
            $returnArray[self::RED] = 0;
        }
        if (!isset($returnArray[self::BLUE])) {
            $returnArray[self::BLUE] = 0;
        }

        return $returnArray;
    }

    public function getTopFlightPlanes(Server $server, $side = self::RED, Tour $tour = null, $limit = 3)
    {
        $entityManager = $this->getEntityManager();
        $result = [];
        $table = $entityManager->getClassMetadata(Sortie::class)->getTableName();
        $planesTable = $entityManager->getClassMetadata(Plane::class)->getTableName();
        $whereClause = null;
        if (!empty($tour)) {
            $whereClause = "AND {$table}.tour_id={$tour->getId()}";
        }
        $sql = "
            SELECT 
                IFNULL(SUM({$table}.total_time), 0) totalTime,
                {$planesTable}.id AS id,
                {$planesTable}.name AS image
            FROM {$table}
            INNER JOIN {$planesTable} ON {$planesTable}.id={$table}.plane_id
            WHERE {$table}.side='{$side}' AND {$table}.server_id={$server->getId()} {$whereClause}
            GROUP BY {$table}.plane_id
            ORDER BY totalTime DESC
            LIMIT {$limit}
        ";

        $search = $entityManager->getConnection()->query($sql)->fetchAll();
        foreach ($search as $row) {
            $row['totalTime'] = $this->formatTime($row['totalTime']);
            $result[] = $row;
        }
        return $result;
    }

    /**
     * @param Pilot $pilot
     * @param Server|null $server
     * @param Tour|null $tour
     * @return int[]|string
     * @throws DBALException
     */
    public function getPilotFlightTime(Pilot $pilot, Server $server = null, Tour $tour = null)
    {
        $em = $this->getEntityManager();
        $tourWhere = '';
        $serverWhere = '';
        if (!empty($tour)) {
            $tourWhere .= " AND tour_id={$tour->getId()}";
        }

        if (!empty($server)) {
            $serverWhere .= " AND server_id={$server->getId()}";
        }
        $sql = "
            SELECT 
                IFNULL(SUM(total_time), 0) AS total_time 
            FROM {$this->getClassMetadata()->getTableName()} 
            WHERE pilot_id={$pilot->getId()} {$tourWhere} {$serverWhere}    
        ";
        $result = $em->getConnection()->query($sql)->fetch(\PDO::FETCH_ASSOC);
        return Helper::calculateFlightTime(intval($result['total_time']));
    }

    public function getFlightsInfo(Server $server, Tour $tour)
    {
        $table = $this->getClassMetadata()->getTableName();
        $planesTable = $this->getEntityManager()->getClassMetadata(Plane::class)->getTableName();
        $sql = "
        SELECT COUNT(id) flights, 'badWeatherFlights' flight_type 
        FROM `{$table}` 
        WHERE tour_id={$tour->getId()} AND bad_weather_flight = 1 AND server_id={$server->getId()}
        UNION 
        SELECT COUNT(id) flights, 'nightTimeFlights' flight_type 
        FROM `{$table}` 
        WHERE tour_id={$tour->getId()} AND night_flight = 1 AND bad_weather_flight=0 AND server_id={$server->getId()}
        UNION
        SELECT COUNT(id) flights, 'goodWeatherFlights' flight_type 
        FROM `{$table}` 
        WHERE tour_id={$tour->getId()} AND bad_weather_flight = 0 AND server_id={$server->getId()}
        UNION
        SELECT COUNT(id) flights, 'groupFlights' flight_type 
        FROM `{$table}` 
        WHERE tour_id={$tour->getId()} AND group_flight = 1 AND server_id={$server->getId()}
        UNION
        SELECT COUNT(id) flights, 'emergencyFlights' flight_type 
        FROM `{$table}` 
        WHERE tour_id={$tour->getId()} AND emergency_flight = 1 AND server_id={$server->getId()}
        UNION
        SELECT COUNT(id) flights, 'allFlights' flight_type 
        FROM `{$table}` 
        WHERE tour_id={$tour->getId()} AND server_id={$server->getId()}
        UNION
        SELECT COUNT({$table}.id) flights, 'helicopterFlights' flight_type 
        FROM {$table} 
        INNER JOIN {$planesTable} ON {$planesTable}.id={$table}.plane_id AND {$planesTable}.is_helicopter=1
        WHERE tour_id={$tour->getId()} AND server_id={$server->getId()}
        UNION
        SELECT COUNT({$table}.id) flights, 'planeFlights' flight_type FROM {$table} 
        INNER JOIN {$planesTable} ON {$planesTable}.id={$table}.plane_id AND {$planesTable}.is_helicopter=0
        WHERE tour_id={$tour->getId()} AND server_id={$server->getId()}
        ";

        $response = [];
        $result = $this->getEntityManager()->getConnection()->query($sql)->fetchAll();
        foreach ($result as $item) {
            $response[$item['flight_type']] = (int) $item['flights'];
        }

        return $response;
    }

    public function getAllFlightsCountByDay(Server $server, Tour $tour)
    {
        $em = $this->getEntityManager();
        $start = $tour->getTourStart();
        $end = $tour->getTourEnd();
        $table = $this->getClassMetadata()->getTableName();
        $sqlFlights = "
            SELECT COUNT(id) flights, DATE_FORMAT(start_flight, '%Y-%m-%d') flights_day
            FROM `{$table}` 
            WHERE server_id = {$server->getId()} AND (start_flight BETWEEN '{$start}' AND '{$end}') AND emergency_flight = 0
            GROUP BY flights_day ORDER BY flights_day ASC
        ";
        $sqlEmergencyFlights = "
            SELECT COUNT(id) flights, DATE_FORMAT(start_flight, '%Y-%m-%d') flights_day
            FROM `{$table}` 
            WHERE server_id = {$server->getId()} AND emergency_flight = 1 AND (start_flight BETWEEN '{$start}' AND '{$end}')
            GROUP BY flights_day ORDER BY flights_day ASC
        ";
        $flightsSearch = $em->getConnection()->query($sqlFlights)->fetchAll();
        $emergencyFlightsSearch = $em->getConnection()->query($sqlEmergencyFlights)->fetchAll();
        $flights = $this->normalizeFlightsDataByDay($flightsSearch);
        $emergencyFlights = $this->normalizeFlightsDataByDay($emergencyFlightsSearch);

        $results = [];
        $period = new DatePeriod(
            new DateTime($start),
            new DateInterval('P1D'),
            new DateTime($end)
        );
        /**
         * @var  $key
         * @var DateTime $date
         */
        foreach ($period as $date) {
            $day = $date->format('Y-m-d');
            $results[] = [
                'day' => date('D, M d', strtotime($day)),
                'flights' => $flights[$day]['flights'] ?? 0,
                'emergencyFlights' => $emergencyFlights[$day]['flights'] ?? 0,
            ];
        }
        return $results;
    }

    public function normalizeFlightsDataByDay($rows)
    {
        $flights = [];

        foreach ($rows as $row) {
            $dayNumber = (int)date('d', strtotime($row['flights_day']));
            $flights[$row['flights_day']] = array(
                'dayNumber' => $dayNumber,
                'flights' => (int)$row['flights'],
            );
        }
        return $flights;
    }

    /**
     * @param Pilot $pilot
     * @param Server|null $server
     * @param Tour|null $tour
     * @param int $limit
     * @return int|mixed|string
     */
    public function getLastFlights(Pilot $pilot, Server $server = null, Tour $tour = null, $limit = 5): mixed
    {
        $qb = $this->createQueryBuilder('f')
            ->where('f.pilot = :pilot')->setParameter('pilot', $pilot);

        if (!empty($server)) {
            $qb->andWhere('f.server = :server')->setParameter('server', $server);
        }
        if (!empty($tour)) {
            $qb->andWhere('f.tour = :tour')->setParameter('tour', $tour);
        }

        $qb->orderBy('f.id', 'DESC');
        $qb->setMaxResults($limit);
        $query = $qb->getQuery();

        return $query->execute();
    }

    /**
     * @param Server $server
     * @param Tour $tour
     * @param int $limit
     * @return array
     * @throws \Doctrine\DBAL\Driver\Exception
     * @throws Exception
     */
    public function getAerobaticsTopPLanes(Server $server, Tour $tour, $limit = 10): array
    {
        $em = $this->getEntityManager();
        $planesTable = $em->getClassMetadata(Plane::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $query = "
            SELECT 
                {$planesTable}.id,
                {$planesTable}.name plane,   
                IFNULL(SUM({$sortiesTable}.total_time), 0) hours
            FROM {$sortiesTable}
            LEFT JOIN {$planesTable} on {$planesTable}.id = {$sortiesTable}.plane_id
            WHERE {$sortiesTable}.server_id = {$server->getId()} and {$sortiesTable}.tour_id = {$tour->getId()}
            GROUP BY {$sortiesTable}.plane_id
            ORDER BY hours DESC
            LIMIT {$limit}
        ";
        $result = [];
        foreach ($em->getConnection()->executeQuery($query)->fetchAllAssociative() as $row) {
            $row['hours'] = Helper::calculateFlightTime(intval($row['hours']));
            $result[] = $row;
        }
        return $result;
    }

    /**
     * @param Server $server
     * @param Tour $tour
     * @param int $type 0 - plane, 1 helicopter
     * @param int $limit
     * @return array
     * @throws Exception
     * @throws \Doctrine\DBAL\Driver\Exception
     */
    public function getTopPilotsForType(Server $server, Tour $tour, int $type, $limit = 10): array // TODO
    {
        $em = $this->getEntityManager();
        $planesTable = $em->getClassMetadata(Plane::class)->getTableName();
        $pilotsTable = $em->getClassMetadata(Pilot::class)->getTableName();
        $sortiesTable = $em->getClassMetadata(Sortie::class)->getTableName();
        $query = "
            SELECT 
                {$pilotsTable}.id,
                {$pilotsTable}.username callsign,   
                {$pilotsTable}.country country,   
                IFNULL(SUM({$sortiesTable}.total_time), 0) hours
            FROM {$sortiesTable}
            INNER JOIN {$planesTable} on {$planesTable}.id = {$sortiesTable}.plane_id AND {$planesTable}.is_helicopter = {$type} 
            INNER JOIN {$pilotsTable} on {$pilotsTable}.id = {$sortiesTable}.pilot_id
            WHERE {$sortiesTable}.server_id = {$server->getId()} and {$sortiesTable}.tour_id = {$tour->getId()}
            GROUP BY {$sortiesTable}.pilot_id
            ORDER BY hours DESC
            LIMIT {$limit}
        ";
        $result = [];
        foreach ($em->getConnection()->executeQuery($query)->fetchAllAssociative() as $row) {
            $row['hours'] = Helper::calculateFlightTime(intval($row['hours']));
            $result[] = $row;
        }
        return $result;
    }

}
